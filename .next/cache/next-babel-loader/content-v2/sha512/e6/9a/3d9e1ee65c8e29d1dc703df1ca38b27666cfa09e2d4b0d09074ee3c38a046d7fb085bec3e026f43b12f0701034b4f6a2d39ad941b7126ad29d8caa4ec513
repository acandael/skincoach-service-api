{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst crystallize = require(\"../services/crystallize\");\n\nconst basketService = require(\"../services/basket-service\");\n\nconst userService = require(\"../services/user-service\");\n\nconst voucherService = require(\"../services/voucher-service\");\n\nconst stripeService = require(\"../services/payment-providers/stripe\");\n\nconst bancontactService = require(\"../services/payment-providers/bancontact\");\n\nconst klarnaService = require(\"../services/payment-providers/klarna\");\n\nconst vippsService = require(\"../services/payment-providers/vipps\");\n\nconst mollieService = require(\"../services/payment-providers/mollie\");\n\nfunction paymentProviderResolver(service) {\n  return () => ({\n    enabled: service.enabled,\n    config: service.frontendConfig\n  });\n}\n\nmodule.exports = {\n  Query: {\n    myCustomBusinessThing: () => ({\n      whatIsThis: \"This is an example of a custom query for GraphQL demonstration purpuses. Check out the MyCustomBusinnessQueries resolvers for how to resolve additional fields apart from the 'whatIsThis' field\"\n    }),\n    basket: (parent, args, context) => basketService.get(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    })),\n    user: () => ({}),\n    orders: () => ({}),\n    paymentProviders: () => ({}),\n    voucher: (parent, args, context) => voucherService.get(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    }))\n  },\n  MyCustomBusinnessQueries: {\n    dynamicRandomInt() {\n      console.log(\"dynamicRandomInt called\");\n      return parseInt(Math.random() * 100);\n    },\n\n    youCanEvenGetTheUserDataHere: () => ({})\n  },\n  UserQueries: {\n    isLoggedIn(parent, args, {\n      user\n    }) {\n      return Boolean(user && \"email\" in user);\n    },\n\n    email: (parent, args, {\n      user\n    }) => user ? user.email : null,\n    logoutLink: (parent, args, context) => userService.getLogoutLink({\n      context\n    })\n  },\n  PaymentProvidersQueries: {\n    stripe: paymentProviderResolver(stripeService),\n    bancontact: paymentProviderResolver(bancontactService),\n    klarna: paymentProviderResolver(klarnaService),\n    vipps: paymentProviderResolver(vippsService),\n    mollie: paymentProviderResolver(mollieService)\n  },\n  OrderQueries: {\n    get: (parent, args) => crystallize.orders.getOrder(args.id)\n  },\n  Mutation: {\n    user: () => ({}),\n    paymentProviders: () => ({})\n  },\n  UserMutations: {\n    sendMagicLink: (parent, args, context) => {\n      return userService.sendMagicLink(_objectSpread(_objectSpread({}, args), {}, {\n        context\n      }));\n    },\n    sendGiftCard: (parent, args, context) => {\n      return userService.sendGiftCard(_objectSpread(_objectSpread({}, args), {}, {\n        context\n      }));\n    }\n  },\n  PaymentProvidersMutations: {\n    stripe: () => ({}),\n    bancontact: () => ({}),\n    klarna: () => ({}),\n    mollie: () => ({}),\n    vipps: () => ({})\n  },\n  StripeMutations: {\n    createPaymentIntent: (parent, args, context) => stripeService.createPaymentIntent(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    })),\n    confirmOrder: (parent, args, context) => stripeService.confirmOrder(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    }))\n  },\n  BancontactMutations: {\n    createPaymentIntent: (parent, args, context) => bancontactService.createPaymentIntent(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    })),\n    confirmOrder: (parent, args, context) => bancontactService.confirmOrder(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    }))\n  },\n  KlarnaMutations: {\n    renderCheckout: (parent, args, context) => klarnaService.renderCheckout(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    }))\n  },\n  MollieMutations: {\n    createPayment: (parent, args, context) => mollieService.createPayment(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    }))\n  },\n  VippsMutations: {\n    initiatePayment: (parent, args, context) => vippsService.initiatePayment(_objectSpread(_objectSpread({}, args), {}, {\n      context\n    }))\n  }\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/graphql-server/resolvers.js"],"names":["crystallize","require","basketService","userService","voucherService","stripeService","bancontactService","klarnaService","vippsService","mollieService","paymentProviderResolver","service","enabled","config","frontendConfig","module","exports","Query","myCustomBusinessThing","whatIsThis","basket","parent","args","context","get","user","orders","paymentProviders","voucher","MyCustomBusinnessQueries","dynamicRandomInt","console","log","parseInt","Math","random","youCanEvenGetTheUserDataHere","UserQueries","isLoggedIn","Boolean","email","logoutLink","getLogoutLink","PaymentProvidersQueries","stripe","bancontact","klarna","vipps","mollie","OrderQueries","getOrder","id","Mutation","UserMutations","sendMagicLink","sendGiftCard","PaymentProvidersMutations","StripeMutations","createPaymentIntent","confirmOrder","BancontactMutations","KlarnaMutations","renderCheckout","MollieMutations","createPayment","VippsMutations","initiatePayment"],"mappings":"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","sourcesContent":["const crystallize = require(\"../services/crystallize\");\n\nconst basketService = require(\"../services/basket-service\");\nconst userService = require(\"../services/user-service\");\nconst voucherService = require(\"../services/voucher-service\");\n\nconst stripeService = require(\"../services/payment-providers/stripe\");\nconst bancontactService = require(\"../services/payment-providers/bancontact\");\nconst klarnaService = require(\"../services/payment-providers/klarna\");\nconst vippsService = require(\"../services/payment-providers/vipps\");\nconst mollieService = require(\"../services/payment-providers/mollie\");\n\nfunction paymentProviderResolver(service) {\n  return () => ({\n    enabled: service.enabled,\n    config: service.frontendConfig,\n  });\n}\n\nmodule.exports = {\n  Query: {\n    myCustomBusinessThing: () => ({\n      whatIsThis:\n        \"This is an example of a custom query for GraphQL demonstration purpuses. Check out the MyCustomBusinnessQueries resolvers for how to resolve additional fields apart from the 'whatIsThis' field\",\n    }),\n    basket: (parent, args, context) => basketService.get({ ...args, context }),\n    user: () => ({}),\n    orders: () => ({}),\n    paymentProviders: () => ({}),\n    voucher: (parent, args, context) =>\n      voucherService.get({ ...args, context }),\n  },\n  MyCustomBusinnessQueries: {\n    dynamicRandomInt() {\n      console.log(\"dynamicRandomInt called\");\n      return parseInt(Math.random() * 100);\n    },\n    youCanEvenGetTheUserDataHere: () => ({}),\n  },\n  UserQueries: {\n    isLoggedIn(parent, args, { user }) {\n      return Boolean(user && \"email\" in user);\n    },\n    email: (parent, args, { user }) => (user ? user.email : null),\n    logoutLink: (parent, args, context) =>\n      userService.getLogoutLink({ context }),\n  },\n  PaymentProvidersQueries: {\n    stripe: paymentProviderResolver(stripeService),\n    bancontact: paymentProviderResolver(bancontactService),\n    klarna: paymentProviderResolver(klarnaService),\n    vipps: paymentProviderResolver(vippsService),\n    mollie: paymentProviderResolver(mollieService),\n  },\n  OrderQueries: {\n    get: (parent, args) => crystallize.orders.getOrder(args.id),\n  },\n  Mutation: {\n    user: () => ({}),\n    paymentProviders: () => ({}),\n  },\n  UserMutations: {\n    sendMagicLink: (parent, args, context) => {\n      return userService.sendMagicLink({ ...args, context });\n    },\n    sendGiftCard: (parent, args, context) => {\n      return userService.sendGiftCard({ ...args, context});\n    },\n  },\n  PaymentProvidersMutations: {\n    stripe: () => ({}),\n    bancontact: () => ({}),\n    klarna: () => ({}),\n    mollie: () => ({}),\n    vipps: () => ({}),\n  },\n  StripeMutations: {\n    createPaymentIntent: (parent, args, context) =>\n      stripeService.createPaymentIntent({ ...args, context }),\n    confirmOrder: (parent, args, context) =>\n      stripeService.confirmOrder({ ...args, context }),\n  },\n  BancontactMutations: {\n    createPaymentIntent: (parent, args, context) =>\n      bancontactService.createPaymentIntent({ ...args, context }),\n    confirmOrder: (parent, args, context) =>\n      bancontactService.confirmOrder({ ...args, context }),\n  },\n  KlarnaMutations: {\n    renderCheckout: (parent, args, context) =>\n      klarnaService.renderCheckout({\n        ...args,\n        context,\n      }),\n  },\n  MollieMutations: {\n    createPayment: (parent, args, context) =>\n      mollieService.createPayment({\n        ...args,\n        context,\n      }),\n  },\n  VippsMutations: {\n    initiatePayment: (parent, args, context) =>\n      vippsService.initiatePayment({\n        ...args,\n        context,\n      }),\n  },\n};\n"]},"metadata":{},"sourceType":"script"}