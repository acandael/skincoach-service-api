{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst basketService = require(\"../../basket-service\");\n\nconst crystallize = require(\"../../crystallize\");\n\nconst {\n  getClient\n} = require(\"./utils\");\n\nmodule.exports = async function createMolliePayment({\n  checkoutModel,\n  context\n}) {\n  const {\n    basketModel,\n    customer,\n    confirmationURL\n  } = checkoutModel;\n  const {\n    user,\n    serviceCallbackHost\n  } = context;\n  const basket = await basketService.get({\n    basketModel,\n    user\n  });\n  const {\n    total\n  } = basket;\n  let {\n    crystallizeOrderId\n  } = basketModel;\n  const isSubscription = false;\n  /* Use a Crystallize order and the fulfilment pipelines to\n   * manage the lifecycle of the order\n   */\n\n  if (crystallizeOrderId) {\n    await crystallize.orders.updateOrder(crystallizeOrderId, _objectSpread(_objectSpread({}, basket), {}, {\n      customer,\n      additionalInformation: JSON.stringify({\n        isSubscription\n      })\n    }));\n  } else {\n    const crystallizeOrder = await crystallize.orders.createOrder(_objectSpread(_objectSpread({}, basket), {}, {\n      customer,\n      additionalInformation: JSON.stringify({\n        isSubscription\n      })\n    }));\n    crystallizeOrderId = crystallizeOrder.id;\n  }\n\n  const mollieClient = await getClient();\n  const mollieCustomer = await mollieClient.customers.create({\n    name: `${customer.firstName} ${customer.lastName}`.trim() || \"Jane Doe\",\n    email: customer.addresses[0].email\n  });\n  const confirmation = new URL(confirmationURL.replace(\"{crystallizeOrderId}\", crystallizeOrderId));\n  const validMollieOrder = {\n    amount: {\n      currency: process.env.MOLLIE_DEFAULT_CURRENCY || total.currency.toUpperCase(),\n      value: total.gross.toFixed(2)\n    },\n    customerId: mollieCustomer.id,\n    sequenceType: \"first\",\n    description: \"Mollie test transaction\",\n    redirectUrl: confirmation.toString(),\n    webhookUrl: `${serviceCallbackHost}/webhooks/payment-providers/mollie/order-update`,\n    metadata: {\n      crystallizeOrderId\n    }\n  };\n  const mollieOrderResponse = await mollieClient.payments.create(validMollieOrder);\n\n  if (isSubscription) {\n    await mollieClient.customers_mandates.get(mollieOrderResponse.mandateId, {\n      customerId: mollieCustomer.id\n    }); // Define the start date for the subscription\n\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() + 15);\n    startDate.toISOString().split(\"T\")[0];\n    await mollieClient.customers_subscriptions.create({\n      customerId: mollieCustomer.id,\n      amount: validMollieOrder.amount,\n      times: 1,\n      interval: \"1 month\",\n      startDate,\n      description: \"Mollie Test subscription\",\n      webhookUrl: `${serviceCallbackHost}/webhooks/payment-providers/mollie/subscription-renewal`,\n      metadata: {}\n    });\n  }\n\n  return {\n    success: true,\n    checkoutLink: mollieOrderResponse._links.checkout.href,\n    crystallizeOrderId\n  };\n};","map":{"version":3,"sources":["/Users/acandael/Sites/webshop-anniek/crystallize-app/src/services/payment-providers/mollie/create-payment.js"],"names":["basketService","require","crystallize","getClient","module","exports","createMolliePayment","checkoutModel","context","basketModel","customer","confirmationURL","user","serviceCallbackHost","basket","get","total","crystallizeOrderId","isSubscription","orders","updateOrder","additionalInformation","JSON","stringify","crystallizeOrder","createOrder","id","mollieClient","mollieCustomer","customers","create","name","firstName","lastName","trim","email","addresses","confirmation","URL","replace","validMollieOrder","amount","currency","process","env","MOLLIE_DEFAULT_CURRENCY","toUpperCase","value","gross","toFixed","customerId","sequenceType","description","redirectUrl","toString","webhookUrl","metadata","mollieOrderResponse","payments","customers_mandates","mandateId","startDate","Date","setDate","getDate","toISOString","split","customers_subscriptions","times","interval","success","checkoutLink","_links","checkout","href"],"mappings":"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","sourcesContent":["const basketService = require(\"../../basket-service\");\nconst crystallize = require(\"../../crystallize\");\n\nconst { getClient } = require(\"./utils\");\n\nmodule.exports = async function createMolliePayment({\n  checkoutModel,\n  context,\n}) {\n  const { basketModel, customer, confirmationURL } = checkoutModel;\n  const { user, serviceCallbackHost } = context;\n\n  const basket = await basketService.get({ basketModel, user });\n  const { total } = basket;\n\n  let { crystallizeOrderId } = basketModel;\n\n  const isSubscription = false;\n\n  /* Use a Crystallize order and the fulfilment pipelines to\n   * manage the lifecycle of the order\n   */\n  if (crystallizeOrderId) {\n    await crystallize.orders.updateOrder(crystallizeOrderId, {\n      ...basket,\n      customer,\n      additionalInformation: JSON.stringify({\n        isSubscription,\n      }),\n    });\n  } else {\n    const crystallizeOrder = await crystallize.orders.createOrder({\n      ...basket,\n      customer,\n      additionalInformation: JSON.stringify({\n        isSubscription,\n      }),\n    });\n    crystallizeOrderId = crystallizeOrder.id;\n  }\n\n  const mollieClient = await getClient();\n\n  const mollieCustomer = await mollieClient.customers.create({\n    name: `${customer.firstName} ${customer.lastName}`.trim() || \"Jane Doe\",\n    email: customer.addresses[0].email,\n  });\n\n  const confirmation = new URL(\n    confirmationURL.replace(\"{crystallizeOrderId}\", crystallizeOrderId)\n  );\n\n  const validMollieOrder = {\n    amount: {\n      currency:\n        process.env.MOLLIE_DEFAULT_CURRENCY || total.currency.toUpperCase(),\n      value: total.gross.toFixed(2),\n    },\n    customerId: mollieCustomer.id,\n    sequenceType: \"first\",\n    description: \"Mollie test transaction\",\n    redirectUrl: confirmation.toString(),\n    webhookUrl: `${serviceCallbackHost}/webhooks/payment-providers/mollie/order-update`,\n    metadata: { crystallizeOrderId },\n  };\n\n  const mollieOrderResponse = await mollieClient.payments.create(\n    validMollieOrder\n  );\n\n  if (isSubscription) {\n    await mollieClient.customers_mandates.get(mollieOrderResponse.mandateId, {\n      customerId: mollieCustomer.id,\n    });\n\n    // Define the start date for the subscription\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() + 15);\n    startDate.toISOString().split(\"T\")[0];\n\n    await mollieClient.customers_subscriptions.create({\n      customerId: mollieCustomer.id,\n      amount: validMollieOrder.amount,\n      times: 1,\n      interval: \"1 month\",\n      startDate,\n      description: \"Mollie Test subscription\",\n      webhookUrl: `${serviceCallbackHost}/webhooks/payment-providers/mollie/subscription-renewal`,\n      metadata: {},\n    });\n  }\n\n  return {\n    success: true,\n    checkoutLink: mollieOrderResponse._links.checkout.href,\n    crystallizeOrderId,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}