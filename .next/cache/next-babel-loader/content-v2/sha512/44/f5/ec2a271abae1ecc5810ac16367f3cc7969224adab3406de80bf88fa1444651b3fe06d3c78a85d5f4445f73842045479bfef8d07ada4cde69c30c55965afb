{"ast":null,"code":"/**\n * Example of a voucher register\n * You can customise this to call an external service\n * or keep static vouchers like this\n */\nconst vouchers = [{\n  code: \"ok-deal\",\n  discountAmount: 2,\n  discountPercent: null,\n  onlyForAuthorisedUser: false\n}, {\n  code: \"fair-deal\",\n  discountAmount: null,\n  discountPercent: 5,\n  onlyForAuthorisedUser: false\n}, {\n  code: \"awesome-deal-logged-in\",\n  discountAmount: null,\n  discountPercent: 10,\n  onlyForAuthorisedUser: true\n}, {\n  code: \"good-deal-logged-in\",\n  discountAmount: 100,\n  discountPercent: null,\n  onlyForAuthorisedUser: true\n}];\nmodule.exports = {\n  get({\n    code,\n    context\n  }) {\n    const {\n      user\n    } = context;\n    const isAnonymousUser = !user || !user.email; // As default, not all the vouchers work for anonymous users.\n    // As you'll see in the configuration above, some need the user to be logged in\n\n    if (isAnonymousUser) {\n      const voucher = vouchers.filter(v => !v.onlyForAuthorisedUser).find(v => v.code === code);\n      return {\n        isValid: Boolean(voucher),\n        voucher\n      };\n    } // We assume that none of the vouchers have repeated codes\n\n\n    const voucher = vouchers.find(v => v.code === code);\n    return {\n      isValid: Boolean(voucher),\n      voucher\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/voucher-service/index.js"],"names":["vouchers","code","discountAmount","discountPercent","onlyForAuthorisedUser","module","exports","get","context","user","isAnonymousUser","email","voucher","filter","v","find","isValid","Boolean"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACC,MAAMA,QAAQ,GAAG,CAChB;AACEC,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,cAAc,EAAE,CAFlB;AAGEC,EAAAA,eAAe,EAAE,IAHnB;AAIEC,EAAAA,qBAAqB,EAAE;AAJzB,CADgB,EAOhB;AACEH,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,cAAc,EAAE,IAFlB;AAGEC,EAAAA,eAAe,EAAE,CAHnB;AAIEC,EAAAA,qBAAqB,EAAE;AAJzB,CAPgB,EAahB;AACEH,EAAAA,IAAI,EAAE,wBADR;AAEEC,EAAAA,cAAc,EAAE,IAFlB;AAGEC,EAAAA,eAAe,EAAE,EAHnB;AAIEC,EAAAA,qBAAqB,EAAE;AAJzB,CAbgB,EAmBhB;AACEH,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,cAAc,EAAE,GAFlB;AAGEC,EAAAA,eAAe,EAAE,IAHnB;AAIEC,EAAAA,qBAAqB,EAAE;AAJzB,CAnBgB,CAAjB;AA2BDC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,GAAG,CAAC;AAAEN,IAAAA,IAAF;AAAQO,IAAAA;AAAR,GAAD,EAAoB;AACrB,UAAM;AAAEC,MAAAA;AAAF,QAAWD,OAAjB;AAEA,UAAME,eAAe,GAAG,CAACD,IAAD,IAAS,CAACA,IAAI,CAACE,KAAvC,CAHqB,CAKrB;AACA;;AACA,QAAID,eAAJ,EAAqB;AACnB,YAAME,OAAO,GAAGZ,QAAQ,CACrBa,MADa,CACLC,CAAD,IAAO,CAACA,CAAC,CAACV,qBADJ,EAEbW,IAFa,CAEPD,CAAD,IAAOA,CAAC,CAACb,IAAF,KAAWA,IAFV,CAAhB;AAIA,aAAO;AACLe,QAAAA,OAAO,EAAEC,OAAO,CAACL,OAAD,CADX;AAELA,QAAAA;AAFK,OAAP;AAID,KAhBoB,CAkBrB;;;AACA,UAAMA,OAAO,GAAGZ,QAAQ,CAACe,IAAT,CAAeD,CAAD,IAAOA,CAAC,CAACb,IAAF,KAAWA,IAAhC,CAAhB;AAEA,WAAO;AACLe,MAAAA,OAAO,EAAEC,OAAO,CAACL,OAAD,CADX;AAELA,MAAAA;AAFK,KAAP;AAID;;AA1Bc,CAAjB","sourcesContent":["/**\n * Example of a voucher register\n * You can customise this to call an external service\n * or keep static vouchers like this\n */\n const vouchers = [\n  {\n    code: \"ok-deal\",\n    discountAmount: 2,\n    discountPercent: null,\n    onlyForAuthorisedUser: false,\n  },\n  {\n    code: \"fair-deal\",\n    discountAmount: null,\n    discountPercent: 5,\n    onlyForAuthorisedUser: false,\n  },\n  {\n    code: \"awesome-deal-logged-in\",\n    discountAmount: null,\n    discountPercent: 10,\n    onlyForAuthorisedUser: true,\n  },\n  {\n    code: \"good-deal-logged-in\",\n    discountAmount: 100,\n    discountPercent: null,\n    onlyForAuthorisedUser: true,\n  },\n];\n\nmodule.exports = {\n  get({ code, context }) {\n    const { user } = context;\n\n    const isAnonymousUser = !user || !user.email;\n\n    // As default, not all the vouchers work for anonymous users.\n    // As you'll see in the configuration above, some need the user to be logged in\n    if (isAnonymousUser) {\n      const voucher = vouchers\n        .filter((v) => !v.onlyForAuthorisedUser)\n        .find((v) => v.code === code);\n\n      return {\n        isValid: Boolean(voucher),\n        voucher,\n      };\n    }\n\n    // We assume that none of the vouchers have repeated codes\n    const voucher = vouchers.find((v) => v.code === code);\n\n    return {\n      isValid: Boolean(voucher),\n      voucher,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}