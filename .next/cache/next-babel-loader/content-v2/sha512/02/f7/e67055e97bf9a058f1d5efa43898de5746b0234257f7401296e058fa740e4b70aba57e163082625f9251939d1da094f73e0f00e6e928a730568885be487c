{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction getTotals({\n  cart,\n  vatType\n}) {\n  // Calculate the totals\n  return cart.reduce((acc, curr) => {\n    const {\n      quantity,\n      price\n    } = curr;\n\n    if (price) {\n      acc.currency = price.currency;\n      const {\n        discounted\n      } = price;\n\n      if (discounted) {\n        acc.gross += price.discounted.gross * quantity;\n        acc.net += price.discounted.net * quantity;\n      } else {\n        acc.gross += price.gross * quantity;\n        acc.net += price.net * quantity;\n      }\n    }\n\n    return acc;\n  }, {\n    gross: 0,\n    net: 0,\n    tax: vatType,\n    discount: 0,\n    currency: \"N/A\"\n  });\n}\n\nmodule.exports = {\n  async get({\n    basketModel,\n    context\n  }) {\n    const {\n      locale,\n      voucherCode\n    } = basketModel,\n          basketFromClient = _objectWithoutProperties(basketModel, [\"locale\", \"voucherCode\"]);\n    /**\n     * Resolve all the voucher codes to valid vouchers for the user\n     */\n\n\n    let voucher;\n\n    if (voucherCode) {\n      const voucherService = require(\"../voucher-service\");\n\n      const response = await voucherService.get({\n        code: voucherCode,\n        context\n      });\n\n      if (response.isValid) {\n        voucher = response.voucher;\n      }\n    }\n    /**\n     * Get all products from Crystallize from their paths\n     */\n\n\n    const {\n      getProductsFromCrystallize\n    } = require(\"./get-products-from-crystallize\");\n\n    const productDataFromCrystallize = await getProductsFromCrystallize({\n      paths: basketFromClient.cart.map(p => p.path),\n      language: locale.crystallizeCatalogueLanguage\n    });\n    let vatType;\n    const shippingItem = {\n      sku: 'shipping-1615825572039',\n      path: '/webshop/shipping',\n      quantity: 1,\n      priceVariantIdentifier: 'default'\n    };\n    basketFromClient.cart.push(shippingItem);\n    /**\n     * Compose the complete cart items enriched with\n     * data from Crystallize\n     */\n\n    const cart = basketFromClient.cart.map(itemFromClient => {\n      const product = productDataFromCrystallize.find(p => p.variants.some(v => v.sku === itemFromClient.sku));\n      console.log(product);\n      vatType = product.vatType;\n      const variant = product.variants.find(v => v.sku === itemFromClient.sku);\n      const {\n        price,\n        currency\n      } = variant.priceVariants.find(pv => pv.identifier === itemFromClient.priceVariantIdentifier) || variant.priceVariants.find(p => p.identifier === \"default\");\n      const gross = price;\n      const net = price * 100 / (100 + vatType.percent);\n      return _objectSpread({\n        path: product.path,\n        quantity: itemFromClient.quantity || 1,\n        vatType,\n        price: {\n          gross,\n          net,\n          tax: vatType,\n          currency\n        }\n      }, variant);\n    }); // Calculate the totals\n\n    let total = getTotals({\n      cart,\n      vatType\n    }); // Add a voucher\n\n    let cartWithDiscountedPrice = cart;\n\n    if (voucher) {\n      const {\n        calculateVoucherDiscountAmount\n      } = require(\"./calculate-voucher-discount-amount\");\n\n      const discountAmount = calculateVoucherDiscountAmount({\n        voucher,\n        amount: total.gross\n      }); // Add a discounted price for each item\n\n      cartWithDiscountedPrice = cart.map(cartItem => {\n        const portionOfTotal = total.gross / (cartItem.price.gross * cartItem.quantity);\n        /**\n         * Each cart item gets a portion of the voucher that\n         * is relative to their own portion of the total amount\n         */\n\n        const gross = cartItem.price.gross - discountAmount * portionOfTotal;\n        const net = gross * 100 / (100 + cartItem.vatType.percent);\n        return _objectSpread(_objectSpread({}, cartItem), {}, {\n          price: _objectSpread(_objectSpread({}, cartItem.price), {}, {\n            gross,\n            net\n          })\n        });\n      }); // Adjust totals\n\n      total = getTotals({\n        cart: cartWithDiscountedPrice,\n        vatType\n      });\n      total.discount = discountAmount; // Add the voucher item to the cart\n\n      const voucherCartItem = {\n        name: voucher.components[0].content.text,\n        quantity: 1,\n        price: {\n          gross: discountAmount * -1,\n          net: discountAmount * -1,\n          currency: total.currency\n        }\n      };\n      /**\n       * Identify the voucher item by using the syntax\n       * --voucher--{name}\n       * This does not have to be a valid product SKU in\n       * Crystallize\n       */\n\n      const voucherCode = voucher.components[0].content.text;\n      const voucherIdentifier = `--voucher--${voucherCode.toLowerCase().replace(/\\s/g, \"-\")}`;\n      voucherCartItem.sku = voucherIdentifier;\n      cart.push(voucherCartItem);\n    }\n\n    return {\n      voucher,\n      cart,\n      cartWithDiscountedPrice,\n      total\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/basket-service/index.js"],"names":["getTotals","cart","vatType","reduce","acc","curr","quantity","price","currency","discounted","gross","net","tax","discount","module","exports","get","basketModel","context","locale","voucherCode","basketFromClient","voucher","voucherService","require","response","code","isValid","getProductsFromCrystallize","productDataFromCrystallize","paths","map","p","path","language","crystallizeCatalogueLanguage","shippingItem","sku","priceVariantIdentifier","push","itemFromClient","product","find","variants","some","v","console","log","variant","priceVariants","pv","identifier","percent","total","cartWithDiscountedPrice","calculateVoucherDiscountAmount","discountAmount","amount","cartItem","portionOfTotal","voucherCartItem","name","components","content","text","voucherIdentifier","toLowerCase","replace"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,CAAmB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAnB,EAAsC;AACpC;AACA,SAAOD,IAAI,CAACE,MAAL,CACL,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAsBF,IAA5B;;AACA,QAAIE,KAAJ,EAAW;AACTH,MAAAA,GAAG,CAACI,QAAJ,GAAeD,KAAK,CAACC,QAArB;AAEA,YAAM;AAAEC,QAAAA;AAAF,UAAiBF,KAAvB;;AACA,UAAIE,UAAJ,EAAgB;AACdL,QAAAA,GAAG,CAACM,KAAJ,IAAaH,KAAK,CAACE,UAAN,CAAiBC,KAAjB,GAAyBJ,QAAtC;AACAF,QAAAA,GAAG,CAACO,GAAJ,IAAWJ,KAAK,CAACE,UAAN,CAAiBE,GAAjB,GAAuBL,QAAlC;AACD,OAHD,MAGO;AACLF,QAAAA,GAAG,CAACM,KAAJ,IAAaH,KAAK,CAACG,KAAN,GAAcJ,QAA3B;AACAF,QAAAA,GAAG,CAACO,GAAJ,IAAWJ,KAAK,CAACI,GAAN,GAAYL,QAAvB;AACD;AACF;;AAED,WAAOF,GAAP;AACD,GAjBI,EAkBL;AAAEM,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,GAAG,EAAE,CAAjB;AAAoBC,IAAAA,GAAG,EAAEV,OAAzB;AAAkCW,IAAAA,QAAQ,EAAE,CAA5C;AAA+CL,IAAAA,QAAQ,EAAE;AAAzD,GAlBK,CAAP;AAoBD;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACf,QAAMC,GAAN,CAAU;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAV,EAAoC;AAClC,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAA+CH,WAArD;AAAA,UAAgCI,gBAAhC,4BAAqDJ,WAArD;AAEA;AACJ;AACA;;;AACI,QAAIK,OAAJ;;AACA,QAAIF,WAAJ,EAAiB;AACf,YAAMG,cAAc,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,YAAMC,QAAQ,GAAG,MAAMF,cAAc,CAACP,GAAf,CAAmB;AAAEU,QAAAA,IAAI,EAAEN,WAAR;AAAqBF,QAAAA;AAArB,OAAnB,CAAvB;;AAEA,UAAIO,QAAQ,CAACE,OAAb,EAAsB;AACpBL,QAAAA,OAAO,GAAGG,QAAQ,CAACH,OAAnB;AACD;AACF;AAED;AACJ;AACA;;;AACI,UAAM;AACJM,MAAAA;AADI,QAEFJ,OAAO,CAAC,iCAAD,CAFX;;AAGA,UAAMK,0BAA0B,GAAG,MAAMD,0BAA0B,CAAC;AAClEE,MAAAA,KAAK,EAAET,gBAAgB,CAACpB,IAAjB,CAAsB8B,GAAtB,CAA2BC,CAAD,IAAOA,CAAC,CAACC,IAAnC,CAD2D;AAElEC,MAAAA,QAAQ,EAAEf,MAAM,CAACgB;AAFiD,KAAD,CAAnE;AAKA,QAAIjC,OAAJ;AAEA,UAAMkC,YAAY,GAAG;AACnBC,MAAAA,GAAG,EAAE,wBADc;AAEnBJ,MAAAA,IAAI,EAAE,mBAFa;AAGnB3B,MAAAA,QAAQ,EAAE,CAHS;AAInBgC,MAAAA,sBAAsB,EAAE;AAJL,KAArB;AAOAjB,IAAAA,gBAAgB,CAACpB,IAAjB,CAAsBsC,IAAtB,CAA2BH,YAA3B;AAEA;AACJ;AACA;AACA;;AACI,UAAMnC,IAAI,GAAGoB,gBAAgB,CAACpB,IAAjB,CAAsB8B,GAAtB,CAA2BS,cAAD,IAAoB;AACzD,YAAMC,OAAO,GAAGZ,0BAA0B,CAACa,IAA3B,CAAiCV,CAAD,IAC9CA,CAAC,CAACW,QAAF,CAAWC,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACR,GAAF,KAAUG,cAAc,CAACH,GAAhD,CADc,CAAhB;AAIAS,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AAEAvC,MAAAA,OAAO,GAAGuC,OAAO,CAACvC,OAAlB;AAEA,YAAM8C,OAAO,GAAGP,OAAO,CAACE,QAAR,CAAiBD,IAAjB,CACbG,CAAD,IAAOA,CAAC,CAACR,GAAF,KAAUG,cAAc,CAACH,GADlB,CAAhB;AAGA,YAAM;AAAE9B,QAAAA,KAAF;AAASC,QAAAA;AAAT,UACJwC,OAAO,CAACC,aAAR,CAAsBP,IAAtB,CACGQ,EAAD,IAAQA,EAAE,CAACC,UAAH,KAAkBX,cAAc,CAACF,sBAD3C,KAEKU,OAAO,CAACC,aAAR,CAAsBP,IAAtB,CAA4BV,CAAD,IAAOA,CAAC,CAACmB,UAAF,KAAiB,SAAnD,CAHP;AAKA,YAAMzC,KAAK,GAAGH,KAAd;AACA,YAAMI,GAAG,GAAIJ,KAAK,GAAG,GAAT,IAAiB,MAAML,OAAO,CAACkD,OAA/B,CAAZ;AAEA;AACEnB,QAAAA,IAAI,EAAEQ,OAAO,CAACR,IADhB;AAEE3B,QAAAA,QAAQ,EAAEkC,cAAc,CAAClC,QAAf,IAA2B,CAFvC;AAGEJ,QAAAA,OAHF;AAIEK,QAAAA,KAAK,EAAE;AACLG,UAAAA,KADK;AAELC,UAAAA,GAFK;AAGLC,UAAAA,GAAG,EAAEV,OAHA;AAILM,UAAAA;AAJK;AAJT,SAUKwC,OAVL;AAYD,KAhCY,CAAb,CA1CkC,CA4ElC;;AACA,QAAIK,KAAK,GAAGrD,SAAS,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,CAArB,CA7EkC,CA+ElC;;AACA,QAAIoD,uBAAuB,GAAGrD,IAA9B;;AACA,QAAIqB,OAAJ,EAAa;AACX,YAAM;AACJiC,QAAAA;AADI,UAEF/B,OAAO,CAAC,qCAAD,CAFX;;AAGA,YAAMgC,cAAc,GAAGD,8BAA8B,CAAC;AACpDjC,QAAAA,OADoD;AAEpDmC,QAAAA,MAAM,EAAEJ,KAAK,CAAC3C;AAFsC,OAAD,CAArD,CAJW,CASX;;AACA4C,MAAAA,uBAAuB,GAAGrD,IAAI,CAAC8B,GAAL,CAAU2B,QAAD,IAAc;AAC/C,cAAMC,cAAc,GAClBN,KAAK,CAAC3C,KAAN,IAAegD,QAAQ,CAACnD,KAAT,CAAeG,KAAf,GAAuBgD,QAAQ,CAACpD,QAA/C,CADF;AAGA;AACR;AACA;AACA;;AACQ,cAAMI,KAAK,GAAGgD,QAAQ,CAACnD,KAAT,CAAeG,KAAf,GAAuB8C,cAAc,GAAGG,cAAtD;AACA,cAAMhD,GAAG,GAAID,KAAK,GAAG,GAAT,IAAiB,MAAMgD,QAAQ,CAACxD,OAAT,CAAiBkD,OAAxC,CAAZ;AAEA,+CACKM,QADL;AAEEnD,UAAAA,KAAK,kCACAmD,QAAQ,CAACnD,KADT;AAEHG,YAAAA,KAFG;AAGHC,YAAAA;AAHG;AAFP;AAQD,OAnByB,CAA1B,CAVW,CA+BX;;AACA0C,MAAAA,KAAK,GAAGrD,SAAS,CAAC;AAAEC,QAAAA,IAAI,EAAEqD,uBAAR;AAAiCpD,QAAAA;AAAjC,OAAD,CAAjB;AACAmD,MAAAA,KAAK,CAACxC,QAAN,GAAiB2C,cAAjB,CAjCW,CAmCX;;AACA,YAAMI,eAAe,GAAG;AACtBC,QAAAA,IAAI,EAAEvC,OAAO,CAACwC,UAAR,CAAmB,CAAnB,EAAsBC,OAAtB,CAA8BC,IADd;AAEtB1D,QAAAA,QAAQ,EAAE,CAFY;AAGtBC,QAAAA,KAAK,EAAE;AACLG,UAAAA,KAAK,EAAE8C,cAAc,GAAG,CAAC,CADpB;AAEL7C,UAAAA,GAAG,EAAE6C,cAAc,GAAG,CAAC,CAFlB;AAGLhD,UAAAA,QAAQ,EAAE6C,KAAK,CAAC7C;AAHX;AAHe,OAAxB;AAUA;AACN;AACA;AACA;AACA;AACA;;AAEM,YAAMY,WAAW,GAAGE,OAAO,CAACwC,UAAR,CAAmB,CAAnB,EAAsBC,OAAtB,CAA8BC,IAAlD;AAEA,YAAMC,iBAAiB,GAAI,cAAc7C,WAAW,CACjD8C,WADsC,GAEtCC,OAFsC,CAE9B,KAF8B,EAEvB,GAFuB,CAElB,EAFvB;AAGAP,MAAAA,eAAe,CAACvB,GAAhB,GAAsB4B,iBAAtB;AAEAhE,MAAAA,IAAI,CAACsC,IAAL,CAAUqB,eAAV;AACD;;AAED,WAAO;AACLtC,MAAAA,OADK;AAELrB,MAAAA,IAFK;AAGLqD,MAAAA,uBAHK;AAILD,MAAAA;AAJK,KAAP;AAMD;;AAvJc,CAAjB","sourcesContent":["function getTotals({ cart, vatType }) {\n  // Calculate the totals\n  return cart.reduce(\n    (acc, curr) => {\n      const { quantity, price } = curr;\n      if (price) {\n        acc.currency = price.currency;\n\n        const { discounted } = price;\n        if (discounted) {\n          acc.gross += price.discounted.gross * quantity;\n          acc.net += price.discounted.net * quantity;\n        } else {\n          acc.gross += price.gross * quantity;\n          acc.net += price.net * quantity;\n        }\n      }\n\n      return acc;\n    },\n    { gross: 0, net: 0, tax: vatType, discount: 0, currency: \"N/A\" }\n  );\n}\n\nmodule.exports = {\n  async get({ basketModel, context }) {\n    const { locale, voucherCode, ...basketFromClient } = basketModel;\n\n    /**\n     * Resolve all the voucher codes to valid vouchers for the user\n     */\n    let voucher;\n    if (voucherCode) {\n      const voucherService = require(\"../voucher-service\");\n      const response = await voucherService.get({ code: voucherCode, context });\n\n      if (response.isValid) {\n        voucher = response.voucher;\n      }\n    }\n\n    /**\n     * Get all products from Crystallize from their paths\n     */\n    const {\n      getProductsFromCrystallize,\n    } = require(\"./get-products-from-crystallize\");\n    const productDataFromCrystallize = await getProductsFromCrystallize({\n      paths: basketFromClient.cart.map((p) => p.path),\n      language: locale.crystallizeCatalogueLanguage,\n    });\n\n    let vatType;\n\n    const shippingItem = {\n      sku: 'shipping-1615825572039',\n      path: '/webshop/shipping',\n      quantity: 1,\n      priceVariantIdentifier: 'default'\n    }\n\n    basketFromClient.cart.push(shippingItem)\n\n    /**\n     * Compose the complete cart items enriched with\n     * data from Crystallize\n     */\n    const cart = basketFromClient.cart.map((itemFromClient) => {\n      const product = productDataFromCrystallize.find((p) =>\n        p.variants.some((v) => v.sku === itemFromClient.sku)\n      );\n\n      console.log(product)\n\n      vatType = product.vatType;\n\n      const variant = product.variants.find(\n        (v) => v.sku === itemFromClient.sku\n      );\n      const { price, currency } =\n        variant.priceVariants.find(\n          (pv) => pv.identifier === itemFromClient.priceVariantIdentifier\n        ) || variant.priceVariants.find((p) => p.identifier === \"default\");\n\n      const gross = price;\n      const net = (price * 100) / (100 + vatType.percent);\n\n      return {\n        path: product.path,\n        quantity: itemFromClient.quantity || 1,\n        vatType,\n        price: {\n          gross,\n          net,\n          tax: vatType,\n          currency,\n        },\n        ...variant,\n      };\n    });\n\n    // Calculate the totals\n    let total = getTotals({ cart, vatType });\n\n    // Add a voucher\n    let cartWithDiscountedPrice = cart;\n    if (voucher) {\n      const {\n        calculateVoucherDiscountAmount,\n      } = require(\"./calculate-voucher-discount-amount\");\n      const discountAmount = calculateVoucherDiscountAmount({\n        voucher,\n        amount: total.gross,\n      });\n\n      // Add a discounted price for each item\n      cartWithDiscountedPrice = cart.map((cartItem) => {\n        const portionOfTotal =\n          total.gross / (cartItem.price.gross * cartItem.quantity);\n\n        /**\n         * Each cart item gets a portion of the voucher that\n         * is relative to their own portion of the total amount\n         */\n        const gross = cartItem.price.gross - discountAmount * portionOfTotal;\n        const net = (gross * 100) / (100 + cartItem.vatType.percent);\n\n        return {\n          ...cartItem,\n          price: {\n            ...cartItem.price,\n            gross,\n            net,\n          },\n        };\n      });\n\n      // Adjust totals\n      total = getTotals({ cart: cartWithDiscountedPrice, vatType });\n      total.discount = discountAmount;\n\n      // Add the voucher item to the cart\n      const voucherCartItem = {\n        name: voucher.components[0].content.text,\n        quantity: 1,\n        price: {\n          gross: discountAmount * -1,\n          net: discountAmount * -1,\n          currency: total.currency,\n        },\n      };\n\n      /**\n       * Identify the voucher item by using the syntax\n       * --voucher--{name}\n       * This does not have to be a valid product SKU in\n       * Crystallize\n       */\n\n      const voucherCode = voucher.components[0].content.text\n\n      const voucherIdentifier = `--voucher--${ voucherCode\n        .toLowerCase()\n        .replace(/\\s/g, \"-\")}`;\n      voucherCartItem.sku = voucherIdentifier;\n\n      cart.push(voucherCartItem);\n    }\n\n    return {\n      voucher,\n      cart,\n      cartWithDiscountedPrice,\n      total,\n    };\n  },\n};"]},"metadata":{},"sourceType":"script"}