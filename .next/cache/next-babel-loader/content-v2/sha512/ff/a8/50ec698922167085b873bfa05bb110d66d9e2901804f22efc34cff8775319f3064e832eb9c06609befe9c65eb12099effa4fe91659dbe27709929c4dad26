{"ast":null,"code":"const cookie = require(\"cookie\");\n\nconst userService = require(\"../services/user-service\");\n\nconst emailService = require(\"../services/email-service\");\n\nconst getHost = require(\"../lib/get-host\");\n\nfunction normaliseRequest(args) {\n  if (args.event) {\n    if (args.event.headers && !args.event.cookies) {\n      return {\n        headers: args.event.headers,\n        cookies: cookie.parse(args.event.headers.cookie)\n      };\n    }\n\n    return args.event;\n  }\n\n  if (args.req) {\n    return args.req;\n  }\n\n  return args;\n}\n\nmodule.exports = args => {\n  const {\n    cookies,\n    headers\n  } = normaliseRequest(args);\n  const user = userService.authenticate(cookies[userService.USER_TOKEN_NAME]); // Determine the URL for webhook callbacks (ex: https://service-api.example.com/api)\n\n  const publicHost = getHost({\n    headers\n  });\n  /**\n   * serviceCallbackHost is used for third party services callbacks\n   * It will be used in e.g. payment provider services callbacks\n   * when async operations are finished\n   *\n   * Example for local development:\n   *  - publicHost: http://localhost:3001\n   *  - serviceCallbackHost: https://abcdefgh12345.ngrok.io\n   */\n\n  const serviceCallbackHost = process.env.SERVICE_CALLBACK_HOST || publicHost;\n  return {\n    user,\n    publicHost,\n    serviceCallbackHost,\n    // Expose common services\n    userService,\n    emailService\n  };\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/graphql-server/context.js"],"names":["cookie","require","userService","emailService","getHost","normaliseRequest","args","event","headers","cookies","parse","req","module","exports","user","authenticate","USER_TOKEN_NAME","publicHost","serviceCallbackHost","process","env","SERVICE_CALLBACK_HOST"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,iBAAD,CAAvB;;AAEA,SAASI,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,MAAIA,IAAI,CAACC,KAAT,EAAgB;AACd,QAAID,IAAI,CAACC,KAAL,CAAWC,OAAX,IAAsB,CAACF,IAAI,CAACC,KAAL,CAAWE,OAAtC,EAA+C;AAC7C,aAAO;AACLD,QAAAA,OAAO,EAAEF,IAAI,CAACC,KAAL,CAAWC,OADf;AAELC,QAAAA,OAAO,EAAET,MAAM,CAACU,KAAP,CAAaJ,IAAI,CAACC,KAAL,CAAWC,OAAX,CAAmBR,MAAhC;AAFJ,OAAP;AAID;;AACD,WAAOM,IAAI,CAACC,KAAZ;AACD;;AAED,MAAID,IAAI,CAACK,GAAT,EAAc;AACZ,WAAOL,IAAI,CAACK,GAAZ;AACD;;AAED,SAAOL,IAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAkBP,IAAD,IAAU;AACzB,QAAM;AAAEG,IAAAA,OAAF;AAAWD,IAAAA;AAAX,MAAuBH,gBAAgB,CAACC,IAAD,CAA7C;AAEA,QAAMQ,IAAI,GAAGZ,WAAW,CAACa,YAAZ,CAAyBN,OAAO,CAACP,WAAW,CAACc,eAAb,CAAhC,CAAb,CAHyB,CAKzB;;AACA,QAAMC,UAAU,GAAGb,OAAO,CAAC;AAAEI,IAAAA;AAAF,GAAD,CAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,QAAMU,mBAAmB,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,IAAqCJ,UAAjE;AAEA,SAAO;AACLH,IAAAA,IADK;AAELG,IAAAA,UAFK;AAGLC,IAAAA,mBAHK;AAKL;AACAhB,IAAAA,WANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CA5BD","sourcesContent":["const cookie = require(\"cookie\");\n\nconst userService = require(\"../services/user-service\");\nconst emailService = require(\"../services/email-service\");\nconst getHost = require(\"../lib/get-host\");\n\nfunction normaliseRequest(args) {\n  if (args.event) {\n    if (args.event.headers && !args.event.cookies) {\n      return {\n        headers: args.event.headers,\n        cookies: cookie.parse(args.event.headers.cookie),\n      };\n    }\n    return args.event;\n  }\n\n  if (args.req) {\n    return args.req;\n  }\n\n  return args;\n}\n\nmodule.exports = (args) => {\n  const { cookies, headers } = normaliseRequest(args);\n\n  const user = userService.authenticate(cookies[userService.USER_TOKEN_NAME]);\n\n  // Determine the URL for webhook callbacks (ex: https://service-api.example.com/api)\n  const publicHost = getHost({ headers });\n\n  /**\n   * serviceCallbackHost is used for third party services callbacks\n   * It will be used in e.g. payment provider services callbacks\n   * when async operations are finished\n   *\n   * Example for local development:\n   *  - publicHost: http://localhost:3001\n   *  - serviceCallbackHost: https://abcdefgh12345.ngrok.io\n   */\n  const serviceCallbackHost = process.env.SERVICE_CALLBACK_HOST || publicHost;\n\n  return {\n    user,\n    publicHost,\n    serviceCallbackHost,\n\n    // Expose common services\n    userService,\n    emailService,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}