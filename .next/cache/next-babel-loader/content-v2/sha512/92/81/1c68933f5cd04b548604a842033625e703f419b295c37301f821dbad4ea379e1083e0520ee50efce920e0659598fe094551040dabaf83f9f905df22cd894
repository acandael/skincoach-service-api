{"ast":null,"code":"module.exports = function getHost({\n  headers\n}) {\n  // If behind a reverse proxy like AWS Elastic Beanstalk for instance\n  const {\n    \"x-forwarded-proto\": xprotocol,\n    \"x-forwarded-host\": xhost\n  } = headers;\n\n  if (xprotocol && xhost) {\n    return `${xprotocol}://${xhost}`;\n  }\n\n  const {\n    host\n  } = headers;\n\n  if (host && host.startsWith(\"localhost\")) {\n    return `http://${host}`;\n  }\n\n  if (process.env.HOST_URL) {\n    return process.env.HOST_URL;\n  } // If hosted on Vercel\n\n\n  if (process.env.VERCEL_URL) {\n    return `https://${process.env.VERCEL_URL}`;\n  }\n\n  if (!host) {\n    throw new Error(\"Cannot determine host for the current request context\");\n  }\n\n  return `https://${host}`;\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/lib/get-host.js"],"names":["module","exports","getHost","headers","xprotocol","xhost","host","startsWith","process","env","HOST_URL","VERCEL_URL","Error"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AAC7C;AACA,QAAM;AAAE,yBAAqBC,SAAvB;AAAkC,wBAAoBC;AAAtD,MAAgEF,OAAtE;;AACA,MAAIC,SAAS,IAAIC,KAAjB,EAAwB;AACtB,WAAQ,GAAED,SAAU,MAAKC,KAAM,EAA/B;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAWH,OAAjB;;AACA,MAAIG,IAAI,IAAIA,IAAI,CAACC,UAAL,CAAgB,WAAhB,CAAZ,EAA0C;AACxC,WAAQ,UAASD,IAAK,EAAtB;AACD;;AAED,MAAIE,OAAO,CAACC,GAAR,CAAYC,QAAhB,EAA0B;AACxB,WAAOF,OAAO,CAACC,GAAR,CAAYC,QAAnB;AACD,GAd4C,CAgB7C;;;AACA,MAAIF,OAAO,CAACC,GAAR,CAAYE,UAAhB,EAA4B;AAC1B,WAAQ,WAAUH,OAAO,CAACC,GAAR,CAAYE,UAAW,EAAzC;AACD;;AAED,MAAI,CAACL,IAAL,EAAW;AACT,UAAM,IAAIM,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,SAAQ,WAAUN,IAAK,EAAvB;AACD,CA1BD","sourcesContent":["module.exports = function getHost({ headers }) {\n  // If behind a reverse proxy like AWS Elastic Beanstalk for instance\n  const { \"x-forwarded-proto\": xprotocol, \"x-forwarded-host\": xhost } = headers;\n  if (xprotocol && xhost) {\n    return `${xprotocol}://${xhost}`;\n  }\n\n  const { host } = headers;\n  if (host && host.startsWith(\"localhost\")) {\n    return `http://${host}`;\n  }\n\n  if (process.env.HOST_URL) {\n    return process.env.HOST_URL;\n  }\n\n  // If hosted on Vercel\n  if (process.env.VERCEL_URL) {\n    return `https://${process.env.VERCEL_URL}`;\n  }\n\n  if (!host) {\n    throw new Error(\"Cannot determine host for the current request context\");\n  }\n\n  return `https://${host}`;\n};\n"]},"metadata":{},"sourceType":"script"}