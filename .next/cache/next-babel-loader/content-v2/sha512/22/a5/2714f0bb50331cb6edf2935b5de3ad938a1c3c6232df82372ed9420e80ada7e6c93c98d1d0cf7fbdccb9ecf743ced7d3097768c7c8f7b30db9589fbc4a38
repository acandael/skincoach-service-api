{"ast":null,"code":"/**\n * Example of a voucher register\n * You can customise this to call an external service\n * or keep static vouchers like this\n */\n//  const voucherRegister = [\n//   {\n//     code: \"no-shipping-cost\",\n//     discountAmount: 8,\n//     discountPercent: null,\n//     onlyForAuthorisedUser: false,\n//   }\n// ];\nconsole.log(vouchers);\nmodule.exports = {\n  async get({\n    code,\n    context\n  }) {\n    const {\n      getVouchersFromCrystallize\n    } = require(\"./get-vouchers-from-crystallize\");\n\n    const vouchers = await getVouchersFromCrystallize();\n    console.log(vouchers);\n    const {\n      user\n    } = context;\n    const isAnonymousUser = !user || !user.email; // As default, not all the vouchers work for anonymous users.\n    // As you'll see in the configuration above, some need the user to be logged in\n\n    if (isAnonymousUser) {\n      const voucher = vouchers.filter(v => !v.onlyForAuthorisedUser).find(v => v.code === code);\n      return {\n        isValid: Boolean(voucher),\n        voucher\n      };\n    } // We assume that none of the vouchers have repeated codes\n\n\n    const voucher = vouchers.find(v => v.code === code);\n    return {\n      isValid: Boolean(voucher),\n      voucher\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/voucher-service/index.js"],"names":["console","log","vouchers","module","exports","get","code","context","getVouchersFromCrystallize","require","user","isAnonymousUser","email","voucher","filter","v","onlyForAuthorisedUser","find","isValid","Boolean"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACf,QAAMC,GAAN,CAAU;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAV,EAA6B;AAE3B,UAAM;AACJC,MAAAA;AADI,QAEFC,OAAO,CAAC,iCAAD,CAFX;;AAIA,UAAMP,QAAQ,GAAG,MAAMM,0BAA0B,EAAjD;AAEAR,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AAEA,UAAM;AAAEQ,MAAAA;AAAF,QAAWH,OAAjB;AAEA,UAAMI,eAAe,GAAG,CAACD,IAAD,IAAS,CAACA,IAAI,CAACE,KAAvC,CAZ2B,CAc3B;AACA;;AACA,QAAID,eAAJ,EAAqB;AACnB,YAAME,OAAO,GAAGX,QAAQ,CACrBY,MADa,CACLC,CAAD,IAAO,CAACA,CAAC,CAACC,qBADJ,EAEbC,IAFa,CAEPF,CAAD,IAAOA,CAAC,CAACT,IAAF,KAAWA,IAFV,CAAhB;AAIA,aAAO;AACLY,QAAAA,OAAO,EAAEC,OAAO,CAACN,OAAD,CADX;AAELA,QAAAA;AAFK,OAAP;AAID,KAzB0B,CA2B3B;;;AACA,UAAMA,OAAO,GAAGX,QAAQ,CAACe,IAAT,CAAeF,CAAD,IAAOA,CAAC,CAACT,IAAF,KAAWA,IAAhC,CAAhB;AAEA,WAAO;AACLY,MAAAA,OAAO,EAAEC,OAAO,CAACN,OAAD,CADX;AAELA,MAAAA;AAFK,KAAP;AAID;;AAnCc,CAAjB","sourcesContent":["/**\n * Example of a voucher register\n * You can customise this to call an external service\n * or keep static vouchers like this\n */\n\n\n//  const voucherRegister = [\n//   {\n//     code: \"no-shipping-cost\",\n//     discountAmount: 8,\n//     discountPercent: null,\n//     onlyForAuthorisedUser: false,\n//   }\n// ];\n\nconsole.log(vouchers)\n\nmodule.exports = {\n  async get({ code, context }) {\n\n    const {\n      getVouchersFromCrystallize,\n    } = require(\"./get-vouchers-from-crystallize\");\n    \n    const vouchers = await getVouchersFromCrystallize();\n\n    console.log(vouchers);\n\n    const { user } = context;\n\n    const isAnonymousUser = !user || !user.email;\n\n    // As default, not all the vouchers work for anonymous users.\n    // As you'll see in the configuration above, some need the user to be logged in\n    if (isAnonymousUser) {\n      const voucher = vouchers\n        .filter((v) => !v.onlyForAuthorisedUser)\n        .find((v) => v.code === code);\n\n      return {\n        isValid: Boolean(voucher),\n        voucher,\n      };\n    }\n\n    // We assume that none of the vouchers have repeated codes\n    const voucher = vouchers.find((v) => v.code === code);\n\n    return {\n      isValid: Boolean(voucher),\n      voucher,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}