{"ast":null,"code":"const {\n  callOrdersApi\n} = require(\"../utils\");\n\nmodule.exports = function waitForOrderToBePersistated({\n  id\n}) {\n  let retries = 0;\n  const maxRetries = 10;\n  return new Promise((resolve, reject) => {\n    (async function check() {\n      const response = await callOrdersApi({\n        query: `\n          {\n            orders {\n              get(id: \"${id}\") {\n                id\n                createdAt\n              }\n            }\n          }\n        `\n      });\n\n      if (response.data && response.data.orders.get) {\n        resolve();\n      } else {\n        retries += 1;\n\n        if (retries > maxRetries) {\n          reject(`Timeout out waiting for Crystallize order \"${id}\" to be persisted`);\n        } else {\n          setTimeout(check, 1000);\n        }\n      }\n    })();\n  });\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/crystallize/orders/wait-for-order-to-be-persistated.js"],"names":["callOrdersApi","require","module","exports","waitForOrderToBePersistated","id","retries","maxRetries","Promise","resolve","reject","check","response","query","data","orders","get","setTimeout"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,UAAD,CAAjC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,2BAAT,CAAqC;AAAEC,EAAAA;AAAF,CAArC,EAA6C;AAC5D,MAAIC,OAAO,GAAG,CAAd;AACA,QAAMC,UAAU,GAAG,EAAnB;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,KAAC,eAAeC,KAAf,GAAuB;AACtB,YAAMC,QAAQ,GAAG,MAAMZ,aAAa,CAAC;AACnCa,QAAAA,KAAK,EAAG;AAChB;AACA;AACA,yBAAyBR,EAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AAV2C,OAAD,CAApC;;AAaA,UAAIO,QAAQ,CAACE,IAAT,IAAiBF,QAAQ,CAACE,IAAT,CAAcC,MAAd,CAAqBC,GAA1C,EAA+C;AAC7CP,QAAAA,OAAO;AACR,OAFD,MAEO;AACLH,QAAAA,OAAO,IAAI,CAAX;;AACA,YAAIA,OAAO,GAAGC,UAAd,EAA0B;AACxBG,UAAAA,MAAM,CACH,8CAA6CL,EAAG,mBAD7C,CAAN;AAGD,SAJD,MAIO;AACLY,UAAAA,UAAU,CAACN,KAAD,EAAQ,IAAR,CAAV;AACD;AACF;AACF,KA1BD;AA2BD,GA5BM,CAAP;AA6BD,CAjCD","sourcesContent":["const { callOrdersApi } = require(\"../utils\");\n\nmodule.exports = function waitForOrderToBePersistated({ id }) {\n  let retries = 0;\n  const maxRetries = 10;\n\n  return new Promise((resolve, reject) => {\n    (async function check() {\n      const response = await callOrdersApi({\n        query: `\n          {\n            orders {\n              get(id: \"${id}\") {\n                id\n                createdAt\n              }\n            }\n          }\n        `,\n      });\n\n      if (response.data && response.data.orders.get) {\n        resolve();\n      } else {\n        retries += 1;\n        if (retries > maxRetries) {\n          reject(\n            `Timeout out waiting for Crystallize order \"${id}\" to be persisted`\n          );\n        } else {\n          setTimeout(check, 1000);\n        }\n      }\n    })();\n  });\n};\n"]},"metadata":{},"sourceType":"script"}