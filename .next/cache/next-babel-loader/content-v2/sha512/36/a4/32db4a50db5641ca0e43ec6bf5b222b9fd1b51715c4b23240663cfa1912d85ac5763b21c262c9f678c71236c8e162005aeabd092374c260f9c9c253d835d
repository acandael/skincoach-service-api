{"ast":null,"code":"const getCrystallizeVouchers = require(\"./get-vouchers-from-crystallize\");\n\nmodule.exports = {\n  async get({\n    code,\n    context\n  }) {\n    const {\n      user\n    } = context;\n    const isAnonymousUser = !user || !user.email;\n    const allCrystallizeVouchers = await getCrystallizeVouchers();\n    const allVouchers = [...allCrystallizeVouchers]; // As default, not all the vouchers work for anonymous users.\n    // As you'll see in the configuration above, some need the user to be logged in\n\n    if (isAnonymousUser) {\n      const voucher = allVouchers.filter(v => !v.onlyForAuthorisedUser).find(v => v.code === code);\n      return {\n        isValid: Boolean(voucher),\n        voucher\n      };\n    } // Search all vouchers for authenticated users\n\n\n    let voucher = allVouchers.find(v => v.code === code);\n    return {\n      isValid: Boolean(voucher),\n      voucher\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/voucher-service/index.js"],"names":["getCrystallizeVouchers","require","module","exports","get","code","context","user","isAnonymousUser","email","allCrystallizeVouchers","allVouchers","voucher","filter","v","onlyForAuthorisedUser","find","isValid","Boolean"],"mappings":"AAAA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,iCAAD,CAAtC;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACf,QAAMC,GAAN,CAAU;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAV,EAA6B;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAWD,OAAjB;AAEA,UAAME,eAAe,GAAG,CAACD,IAAD,IAAS,CAACA,IAAI,CAACE,KAAvC;AAEA,UAAMC,sBAAsB,GAAG,MAAMV,sBAAsB,EAA3D;AAEA,UAAMW,WAAW,GAAG,CAAC,GAAGD,sBAAJ,CAApB,CAP2B,CAS3B;AACA;;AACA,QAAIF,eAAJ,EAAqB;AACnB,YAAMI,OAAO,GAAGD,WAAW,CACxBE,MADa,CACLC,CAAD,IAAO,CAACA,CAAC,CAACC,qBADJ,EAEbC,IAFa,CAEPF,CAAD,IAAOA,CAAC,CAACT,IAAF,KAAWA,IAFV,CAAhB;AAIA,aAAO;AACLY,QAAAA,OAAO,EAAEC,OAAO,CAACN,OAAD,CADX;AAELA,QAAAA;AAFK,OAAP;AAID,KApB0B,CAsB3B;;;AACA,QAAIA,OAAO,GAAGD,WAAW,CAACK,IAAZ,CAAkBF,CAAD,IAAOA,CAAC,CAACT,IAAF,KAAWA,IAAnC,CAAd;AAEA,WAAO;AACLY,MAAAA,OAAO,EAAEC,OAAO,CAACN,OAAD,CADX;AAELA,MAAAA;AAFK,KAAP;AAID;;AA9Bc,CAAjB","sourcesContent":["const getCrystallizeVouchers = require(\"./get-vouchers-from-crystallize\");\n\nmodule.exports = {\n  async get({ code, context }) {\n    const { user } = context;\n\n    const isAnonymousUser = !user || !user.email;\n\n    const allCrystallizeVouchers = await getCrystallizeVouchers();\n\n    const allVouchers = [...allCrystallizeVouchers];\n\n    // As default, not all the vouchers work for anonymous users.\n    // As you'll see in the configuration above, some need the user to be logged in\n    if (isAnonymousUser) {\n      const voucher = allVouchers\n        .filter((v) => !v.onlyForAuthorisedUser)\n        .find((v) => v.code === code);\n\n      return {\n        isValid: Boolean(voucher),\n        voucher,\n      };\n    }\n\n    // Search all vouchers for authenticated users\n    let voucher = allVouchers.find((v) => v.code === code);\n\n    return {\n      isValid: Boolean(voucher),\n      voucher,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}