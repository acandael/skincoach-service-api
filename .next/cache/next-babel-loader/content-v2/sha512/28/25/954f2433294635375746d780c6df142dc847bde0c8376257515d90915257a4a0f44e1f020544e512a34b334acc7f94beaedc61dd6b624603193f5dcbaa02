{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst invariant = require(\"invariant\");\n\nconst fetch = require(\"node-fetch\");\n\nconst CRYSTALLIZE_TENANT_IDENTIFIER = process.env.CRYSTALLIZE_TENANT_IDENTIFIER;\nconst CRYSTALLIZE_ACCESS_TOKEN_ID = process.env.CRYSTALLIZE_ACCESS_TOKEN_ID;\nconst CRYSTALLIZE_ACCESS_TOKEN_SECRET = process.env.CRYSTALLIZE_ACCESS_TOKEN_SECRET;\ninvariant(CRYSTALLIZE_TENANT_IDENTIFIER, \"Missing process.env.CRYSTALLIZE_TENANT_IDENTIFIER\");\n\nfunction createApiCaller(uri) {\n  return async function callApi({\n    query,\n    variables,\n    operationName\n  }) {\n    invariant(CRYSTALLIZE_ACCESS_TOKEN_ID, \"Missing process.env.CRYSTALLIZE_ACCESS_TOKEN_ID\");\n    invariant(CRYSTALLIZE_ACCESS_TOKEN_SECRET, \"Missing process.env.CRYSTALLIZE_ACCESS_TOKEN_SECRET\");\n    const response = await fetch(uri, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"X-Crystallize-Access-Token-Id\": CRYSTALLIZE_ACCESS_TOKEN_ID,\n        \"X-Crystallize-Access-Token-Secret\": CRYSTALLIZE_ACCESS_TOKEN_SECRET\n      },\n      body: JSON.stringify({\n        operationName,\n        query,\n        variables\n      })\n    });\n    const json = await response.json();\n\n    if (json.errors) {\n      console.log(JSON.stringify(json.errors, null, 2));\n    }\n\n    return json;\n  };\n}\n\nfunction normaliseOrderModel(_ref) {\n  let {\n    customer,\n    cart,\n    total\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"customer\", \"cart\", \"total\"]);\n\n  const delivery = customer.addresses[1];\n  console.log(delivery);\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), total && {\n    total: {\n      gross: total.gross,\n      net: total.net,\n      currency: total.currency,\n      tax: total.tax\n    }\n  }), cart && {\n    cart: cart.map(function handleOrderCartItem(item) {\n      const {\n        images = [],\n        name,\n        sku,\n        productid,\n        productVariantId,\n        quantity,\n        price\n      } = item;\n      return {\n        name,\n        sku,\n        productid,\n        productVariantId,\n        quantity,\n        price,\n        imageUrl: images && images[0] && images[0].url\n      };\n    })\n  }), customer && {\n    customer: {\n      firstName: customer.firstName || null,\n      lastName: customer.lastName || null,\n      addresses: customer.addresses || [{\n        type: \"billing\",\n        email: customer.email || undefined\n      }, {\n        type: \"delivery\"\n      }]\n    }\n  });\n}\n\nmodule.exports = {\n  normaliseOrderModel,\n\n  /**\n   * Catalogue API is the fast read-only API to query frontend\n   * related data\n   */\n  callCatalogueApi: createApiCaller(`https://api.crystallize.com/${CRYSTALLIZE_TENANT_IDENTIFIER}/catalogue`),\n\n  /**\n   * Orders API is the highly scalable API to send/read massive\n   * amounts of orders\n   */\n  callOrdersApi: createApiCaller(`https://api.crystallize.com/${CRYSTALLIZE_TENANT_IDENTIFIER}/orders`),\n\n  /**\n   * The PIM API is used for doing the ALL possible actions on\n   * a tenant or your user profile\n   */\n  callPimApi: createApiCaller(\"https://pim.crystallize.com/graphql\")\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/crystallize/utils.js"],"names":["invariant","require","fetch","CRYSTALLIZE_TENANT_IDENTIFIER","process","env","CRYSTALLIZE_ACCESS_TOKEN_ID","CRYSTALLIZE_ACCESS_TOKEN_SECRET","createApiCaller","uri","callApi","query","variables","operationName","response","method","headers","body","JSON","stringify","json","errors","console","log","normaliseOrderModel","customer","cart","total","rest","delivery","addresses","gross","net","currency","tax","map","handleOrderCartItem","item","images","name","sku","productid","productVariantId","quantity","price","imageUrl","url","firstName","lastName","type","email","undefined","module","exports","callCatalogueApi","callOrdersApi","callPimApi"],"mappings":"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","sourcesContent":["const invariant = require(\"invariant\");\nconst fetch = require(\"node-fetch\");\n\nconst CRYSTALLIZE_TENANT_IDENTIFIER = process.env.CRYSTALLIZE_TENANT_IDENTIFIER;\nconst CRYSTALLIZE_ACCESS_TOKEN_ID = process.env.CRYSTALLIZE_ACCESS_TOKEN_ID;\nconst CRYSTALLIZE_ACCESS_TOKEN_SECRET =\n  process.env.CRYSTALLIZE_ACCESS_TOKEN_SECRET;\n\ninvariant(\n  CRYSTALLIZE_TENANT_IDENTIFIER,\n  \"Missing process.env.CRYSTALLIZE_TENANT_IDENTIFIER\"\n);\n\nfunction createApiCaller(uri) {\n  return async function callApi({ query, variables, operationName }) {\n    invariant(\n      CRYSTALLIZE_ACCESS_TOKEN_ID,\n      \"Missing process.env.CRYSTALLIZE_ACCESS_TOKEN_ID\"\n    );\n    invariant(\n      CRYSTALLIZE_ACCESS_TOKEN_SECRET,\n      \"Missing process.env.CRYSTALLIZE_ACCESS_TOKEN_SECRET\"\n    );\n\n    const response = await fetch(uri, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"X-Crystallize-Access-Token-Id\": CRYSTALLIZE_ACCESS_TOKEN_ID,\n        \"X-Crystallize-Access-Token-Secret\": CRYSTALLIZE_ACCESS_TOKEN_SECRET,\n      },\n      body: JSON.stringify({ operationName, query, variables }),\n    });\n\n    const json = await response.json();\n\n    if (json.errors) {\n      console.log(JSON.stringify(json.errors, null, 2));\n    }\n\n    return json;\n  };\n}\n\nfunction normaliseOrderModel({ customer, cart, total, ...rest }) {\n  const delivery = customer.addresses[1];\n  console.log(delivery)\n  return {\n    ...rest,\n    ...(total && {\n      total: {\n        gross: total.gross,\n        net: total.net,\n        currency: total.currency,\n        tax: total.tax,\n      },\n    }),\n    ...(cart && {\n      cart: cart.map(function handleOrderCartItem(item) {\n        const {\n          images = [],\n          name,\n          sku,\n          productid,\n          productVariantId,\n          quantity,\n          price,\n        } = item;\n\n        return {\n          name,\n          sku,\n          productid,\n          productVariantId,\n          quantity,\n          price,\n          imageUrl: images && images[0] && images[0].url,\n        };\n      }),\n    }),\n    ...(customer && {\n      customer: {\n        firstName: customer.firstName || null,\n        lastName: customer.lastName || null,\n        addresses: customer.addresses || [\n          {\n            type: \"billing\",\n            email: customer.email || undefined,\n          },\n          {\n            type: \"delivery\"\n          }\n        ],\n      },\n    }),\n  };\n}\n\nmodule.exports = {\n  normaliseOrderModel,\n\n  /**\n   * Catalogue API is the fast read-only API to query frontend\n   * related data\n   */\n  callCatalogueApi: createApiCaller(\n    `https://api.crystallize.com/${CRYSTALLIZE_TENANT_IDENTIFIER}/catalogue`\n  ),\n  /**\n   * Orders API is the highly scalable API to send/read massive\n   * amounts of orders\n   */\n  callOrdersApi: createApiCaller(\n    `https://api.crystallize.com/${CRYSTALLIZE_TENANT_IDENTIFIER}/orders`\n  ),\n\n  /**\n   * The PIM API is used for doing the ALL possible actions on\n   * a tenant or your user profile\n   */\n  callPimApi: createApiCaller(\"https://pim.crystallize.com/graphql\"),\n};"]},"metadata":{},"sourceType":"script"}