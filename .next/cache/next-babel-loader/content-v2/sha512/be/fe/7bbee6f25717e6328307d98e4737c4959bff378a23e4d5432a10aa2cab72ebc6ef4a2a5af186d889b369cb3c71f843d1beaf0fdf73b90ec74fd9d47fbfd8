{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst invariant = require(\"invariant\");\n\nconst basketService = require(\"../../basket-service\");\n\nconst crystallize = require(\"../../crystallize\");\n\nconst {\n  getClient\n} = require(\"./utils\");\n\nconst VIPPS_MERCHANT_SERIAL = process.env.VIPPS_MERCHANT_SERIAL;\n\nmodule.exports = async function initiateVippsPayment({\n  checkoutModel,\n  context\n}) {\n  invariant(VIPPS_MERCHANT_SERIAL, \"process.env.VIPPS_MERCHANT_SERIAL is undefined\");\n  const {\n    basketModel,\n    customer,\n    confirmationURL,\n    checkoutURL\n  } = checkoutModel;\n  const {\n    user,\n    serviceCallbackHost\n  } = context;\n  const basket = await basketService.get({\n    basketModel,\n    user\n  });\n  const {\n    total\n  } = basket;\n  /* Use a Crystallize order and the fulfilment pipelines to\n   * manage the lifecycle of the order\n   */\n\n  const crystallizeOrder = await crystallize.orders.createOrder(_objectSpread(_objectSpread({}, basket), {}, {\n    customer\n  }));\n  const crystallizeOrderId = crystallizeOrder.id;\n  /**\n   * The Vipps \"fallback\" url, is where the user will be redirected\n   * to after completing the Vipps checkout.\n   */\n\n  const fallBackURL = new URL(`${serviceCallbackHost}/webhooks/payment-providers/vipps/fallback/${crystallizeOrderId}`);\n  fallBackURL.searchParams.append(\"confirmation\", encodeURIComponent(confirmationURL.replace(\"{crystallizeOrderId}\", crystallizeOrderId)));\n  fallBackURL.searchParams.append(\"checkout\", encodeURIComponent(checkoutURL));\n  const vippsClient = await getClient();\n  const vippsResponse = await vippsClient.initiatePayment({\n    order: {\n      merchantInfo: {\n        merchantSerialNumber: VIPPS_MERCHANT_SERIAL,\n        fallBack: fallBackURL.toString(),\n        callbackPrefix: `${serviceCallbackHost}/webhooks/payment-providers/vipps/order-update`,\n        shippingDetailsPrefix: `${serviceCallbackHost}/webhooks/payment-providers/vipps/shipping`,\n        consentRemovalPrefix: `${serviceCallbackHost}/webhooks/payment-providers/vipps/constent-removal`,\n        paymentType: \"eComm Express Payment\",\n        isApp: false,\n        staticShippingDetails: [// Provide a default shipping method\n        {\n          isDefault: \"Y\",\n          priority: 0,\n          shippingCost: 0,\n          shippingMethod: \"Posten Servicepakke\",\n          shippingMethodId: \"posten-servicepakke\"\n        }]\n      },\n      customerInfo: {},\n      transaction: {\n        orderId: crystallizeOrderId,\n        amount: parseInt(total.gross * 100, 10),\n        transactionText: \"Crystallize test transaction\"\n      }\n    }\n  });\n  return {\n    success: true,\n    checkoutLink: vippsResponse.url,\n    crystallizeOrderId\n  };\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/payment-providers/vipps/initiate-payment.js"],"names":["invariant","require","basketService","crystallize","getClient","VIPPS_MERCHANT_SERIAL","process","env","module","exports","initiateVippsPayment","checkoutModel","context","basketModel","customer","confirmationURL","checkoutURL","user","serviceCallbackHost","basket","get","total","crystallizeOrder","orders","createOrder","crystallizeOrderId","id","fallBackURL","URL","searchParams","append","encodeURIComponent","replace","vippsClient","vippsResponse","initiatePayment","order","merchantInfo","merchantSerialNumber","fallBack","toString","callbackPrefix","shippingDetailsPrefix","consentRemovalPrefix","paymentType","isApp","staticShippingDetails","isDefault","priority","shippingCost","shippingMethod","shippingMethodId","customerInfo","transaction","orderId","amount","parseInt","gross","transactionText","success","checkoutLink","url"],"mappings":"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","sourcesContent":["const invariant = require(\"invariant\");\n\nconst basketService = require(\"../../basket-service\");\nconst crystallize = require(\"../../crystallize\");\n\nconst { getClient } = require(\"./utils\");\n\nconst VIPPS_MERCHANT_SERIAL = process.env.VIPPS_MERCHANT_SERIAL;\n\nmodule.exports = async function initiateVippsPayment({\n  checkoutModel,\n  context,\n}) {\n  invariant(\n    VIPPS_MERCHANT_SERIAL,\n    \"process.env.VIPPS_MERCHANT_SERIAL is undefined\"\n  );\n\n  const { basketModel, customer, confirmationURL, checkoutURL } = checkoutModel;\n  const { user, serviceCallbackHost } = context;\n\n  const basket = await basketService.get({ basketModel, user });\n  const { total } = basket;\n\n  /* Use a Crystallize order and the fulfilment pipelines to\n   * manage the lifecycle of the order\n   */\n  const crystallizeOrder = await crystallize.orders.createOrder({\n    ...basket,\n    customer,\n  });\n  const crystallizeOrderId = crystallizeOrder.id;\n\n  /**\n   * The Vipps \"fallback\" url, is where the user will be redirected\n   * to after completing the Vipps checkout.\n   */\n  const fallBackURL = new URL(\n    `${serviceCallbackHost}/webhooks/payment-providers/vipps/fallback/${crystallizeOrderId}`\n  );\n  fallBackURL.searchParams.append(\n    \"confirmation\",\n    encodeURIComponent(\n      confirmationURL.replace(\"{crystallizeOrderId}\", crystallizeOrderId)\n    )\n  );\n  fallBackURL.searchParams.append(\"checkout\", encodeURIComponent(checkoutURL));\n\n  const vippsClient = await getClient();\n\n  const vippsResponse = await vippsClient.initiatePayment({\n    order: {\n      merchantInfo: {\n        merchantSerialNumber: VIPPS_MERCHANT_SERIAL,\n        fallBack: fallBackURL.toString(),\n        callbackPrefix: `${serviceCallbackHost}/webhooks/payment-providers/vipps/order-update`,\n        shippingDetailsPrefix: `${serviceCallbackHost}/webhooks/payment-providers/vipps/shipping`,\n        consentRemovalPrefix: `${serviceCallbackHost}/webhooks/payment-providers/vipps/constent-removal`,\n        paymentType: \"eComm Express Payment\",\n        isApp: false,\n        staticShippingDetails: [\n          // Provide a default shipping method\n          {\n            isDefault: \"Y\",\n            priority: 0,\n            shippingCost: 0,\n            shippingMethod: \"Posten Servicepakke\",\n            shippingMethodId: \"posten-servicepakke\",\n          },\n        ],\n      },\n      customerInfo: {},\n      transaction: {\n        orderId: crystallizeOrderId,\n        amount: parseInt(total.gross * 100, 10),\n        transactionText: \"Crystallize test transaction\",\n      },\n    },\n  });\n\n  return {\n    success: true,\n    checkoutLink: vippsResponse.url,\n    crystallizeOrderId,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}