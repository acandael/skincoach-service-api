{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst {\n  callPimApi,\n  normalizeOrderModel\n} = require(\"../utils\");\n\nmodule.exports = async function updateOrder(id, variables) {\n  const response = await callPimApi({\n    variables: _objectSpread({\n      id\n    }, normalizeOrderModel(variables)),\n    query: `\n      mutation updateOrder(\n        $id: ID!\n        $customer: CustomerInput\n        $payment: [PaymentInput!]\n        $additionalInformation: String\n      ) {\n        order {\n            update(\n            id: $id,\n            input: {\n              customer: $customer\n              payment: $payment\n              additionalInformation: $additionalInformation\n            }\n          ) {\n            id\n          }\n        }\n      }\n  `\n  });\n  return response.data.order.update;\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/crystallize/orders/update-order.js"],"names":["callPimApi","normalizeOrderModel","require","module","exports","updateOrder","id","variables","response","query","data","order","update"],"mappings":";;;;;;AAAA,MAAM;AAAEA,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAAsCC,OAAO,CAAC,UAAD,CAAnD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,eAAeC,WAAf,CAA2BC,EAA3B,EAA+BC,SAA/B,EAA0C;AACzD,QAAMC,QAAQ,GAAG,MAAMR,UAAU,CAAC;AAChCO,IAAAA,SAAS;AACPD,MAAAA;AADO,OAEJL,mBAAmB,CAACM,SAAD,CAFf,CADuB;AAKhCE,IAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBoC,GAAD,CAAjC;AA4BA,SAAOD,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBC,MAA3B;AACD,CA9BD","sourcesContent":["const { callPimApi, normalizeOrderModel } = require(\"../utils\");\n\nmodule.exports = async function updateOrder(id, variables) {\n  const response = await callPimApi({\n    variables: {\n      id,\n      ...normalizeOrderModel(variables),\n    },\n    query: `\n      mutation updateOrder(\n        $id: ID!\n        $customer: CustomerInput\n        $payment: [PaymentInput!]\n        $additionalInformation: String\n      ) {\n        order {\n            update(\n            id: $id,\n            input: {\n              customer: $customer\n              payment: $payment\n              additionalInformation: $additionalInformation\n            }\n          ) {\n            id\n          }\n        }\n      }\n  `,\n  });\n\n  return response.data.order.update;\n};\n"]},"metadata":{},"sourceType":"script"}