{"ast":null,"code":"/**\n * Gets information for products with a given path.\n * Gets all of the products with a single request\n * by composing the query dynamically\n */\nasync function getProductsFromCrystallize({\n  paths,\n  language\n}) {\n  if (paths.length === 0) {\n    return [];\n  }\n\n  const {\n    callCatalogueApi\n  } = require(\"../crystallize/utils\");\n\n  const response = await callCatalogueApi({\n    query: `{\n      ${paths.map((path, index) => `\n        product${index}: catalogue(path: \"${path}\", language: \"${language}\") {\n          path\n          ... on Product {\n            vatType {\n              name\n              percent\n            }\n            variants {\n              sku\n              name\n              stock\n              priceVariants {\n                price\n                identifier\n                currency\n              }\n              attributes {\n                attribute\n                value\n              }\n              images {\n                url\n                variants {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      `)}\n    }`\n  });\n  console.log(response);\n  return paths.map((_, i) => response.data[`product${i}`]).filter(p => !!p);\n}\n\nmodule.exports = {\n  getProductsFromCrystallize\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/basket-service/get-products-from-crystallize.js"],"names":["getProductsFromCrystallize","paths","language","length","callCatalogueApi","require","response","query","map","path","index","console","log","_","i","data","filter","p","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACC,eAAeA,0BAAf,CAA0C;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAA1C,EAA+D;AAC9D,MAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAuBC,OAAO,CAAC,sBAAD,CAApC;;AAEA,QAAMC,QAAQ,GAAG,MAAMF,gBAAgB,CAAC;AACtCG,IAAAA,KAAK,EAAG;AACZ,QAAQN,KAAK,CAACO,GAAN,CACA,CAACC,IAAD,EAAOC,KAAP,KAAkB;AAC1B,iBAAiBA,KAAM,sBAAqBD,IAAK,iBAAgBP,QAAS;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAjCQ,CAkCA;AACR;AArC0C,GAAD,CAAvC;AAwCAS,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAEA,SAAOL,KAAK,CAACO,GAAN,CAAU,CAACK,CAAD,EAAIC,CAAJ,KAAUR,QAAQ,CAACS,IAAT,CAAe,UAASD,CAAE,EAA1B,CAApB,EAAkDE,MAAlD,CAA0DC,CAAD,IAAO,CAAC,CAACA,CAAlE,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfnB,EAAAA;AADe,CAAjB","sourcesContent":["/**\n * Gets information for products with a given path.\n * Gets all of the products with a single request\n * by composing the query dynamically\n */\n async function getProductsFromCrystallize({ paths, language }) {\n  if (paths.length === 0) {\n    return [];\n  }\n\n  const { callCatalogueApi } = require(\"../crystallize/utils\");\n\n  const response = await callCatalogueApi({\n    query: `{\n      ${paths.map(\n        (path, index) => `\n        product${index}: catalogue(path: \"${path}\", language: \"${language}\") {\n          path\n          ... on Product {\n            vatType {\n              name\n              percent\n            }\n            variants {\n              sku\n              name\n              stock\n              priceVariants {\n                price\n                identifier\n                currency\n              }\n              attributes {\n                attribute\n                value\n              }\n              images {\n                url\n                variants {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      `\n      )}\n    }`,\n  });\n\n  console.log(response)\n\n  return paths.map((_, i) => response.data[`product${i}`]).filter((p) => !!p);\n}\n\nmodule.exports = {\n  getProductsFromCrystallize,\n};"]},"metadata":{},"sourceType":"script"}