{"ast":null,"code":"const crystallize = require(\"../../crystallize\");\n\nconst emailService = require(\"../../email-service\");\n\nconst {\n  getClient\n} = require(\"./utils\");\n\nmodule.exports = async function vippsFallback({\n  crystallizeOrderId,\n  onSuccessURL,\n  onErrorURL\n}) {\n  let redirectTo = \"\";\n  const vippsClient = await getClient(); // Retrieve the Vipps order to get transaction details\n\n  const order = await vippsClient.getOrderDetails({\n    orderId: crystallizeOrderId\n  });\n  const [lastTransactionLogEntry] = order.transactionLogHistory.sort((a, b) => new Date(b.timeStamp) - new Date(a.timeStamp));\n  /**\n   * If the transaction logs last entry has status\n   * RESERVE, then the amount has been successfully\n   * reserved on the user account, and we can show\n   * the confirmation page\n   */\n\n  if (lastTransactionLogEntry.operation === \"RESERVE\" && lastTransactionLogEntry.operationSuccess) {\n    redirectTo = onSuccessURL;\n    /**\n     * At this point we have user details from Vipps, which\n     * makes it a good time to update the Crystallize order\n     */\n\n    const {\n      userDetails: {\n        userId,\n        firstName,\n        lastName,\n        email,\n        mobileNumber: phone\n      } = {},\n      shippingDetails: {\n        address: {\n          addressLine1: street,\n          addressLine2: street2,\n          postCode: postalCode,\n          city,\n          country\n        } = {}\n      } = {}\n    } = order;\n    await crystallize.orders.updateOrder(crystallizeOrderId, {\n      payment: [{\n        provider: \"custom\",\n        custom: {\n          properties: [{\n            property: \"PaymentProvider\",\n            value: \"Vipps\"\n          }, {\n            property: \"Vipps orderId\",\n            value: crystallizeOrderId\n          }, {\n            property: \"Vipps userId\",\n            value: userId\n          }]\n        }\n      }],\n      customer: {\n        identifier: email,\n        firstName,\n        lastName,\n        addresses: [{\n          type: \"delivery\",\n          email,\n          firstName,\n          lastName,\n          phone,\n          street,\n          street2,\n          postalCode,\n          city,\n          country\n        }]\n      }\n    }); // Send out the confirmation email\n\n    await emailService.sendOrderConfirmation(crystallizeOrderId);\n  } else {\n    redirectTo = onErrorURL;\n    console.log(JSON.stringify(lastTransactionLogEntry, null, 2));\n  }\n\n  return {\n    redirectTo\n  };\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/payment-providers/vipps/fallback.js"],"names":["crystallize","require","emailService","getClient","module","exports","vippsFallback","crystallizeOrderId","onSuccessURL","onErrorURL","redirectTo","vippsClient","order","getOrderDetails","orderId","lastTransactionLogEntry","transactionLogHistory","sort","a","b","Date","timeStamp","operation","operationSuccess","userDetails","userId","firstName","lastName","email","mobileNumber","phone","shippingDetails","address","addressLine1","street","addressLine2","street2","postCode","postalCode","city","country","orders","updateOrder","payment","provider","custom","properties","property","value","customer","identifier","addresses","type","sendOrderConfirmation","console","log","JSON","stringify"],"mappings":"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","sourcesContent":["const crystallize = require(\"../../crystallize\");\nconst emailService = require(\"../../email-service\");\n\nconst { getClient } = require(\"./utils\");\n\nmodule.exports = async function vippsFallback({\n  crystallizeOrderId,\n  onSuccessURL,\n  onErrorURL,\n}) {\n  let redirectTo = \"\";\n\n  const vippsClient = await getClient();\n\n  // Retrieve the Vipps order to get transaction details\n  const order = await vippsClient.getOrderDetails({\n    orderId: crystallizeOrderId,\n  });\n  const [lastTransactionLogEntry] = order.transactionLogHistory.sort(\n    (a, b) => new Date(b.timeStamp) - new Date(a.timeStamp)\n  );\n\n  /**\n   * If the transaction logs last entry has status\n   * RESERVE, then the amount has been successfully\n   * reserved on the user account, and we can show\n   * the confirmation page\n   */\n  if (\n    lastTransactionLogEntry.operation === \"RESERVE\" &&\n    lastTransactionLogEntry.operationSuccess\n  ) {\n    redirectTo = onSuccessURL;\n\n    /**\n     * At this point we have user details from Vipps, which\n     * makes it a good time to update the Crystallize order\n     */\n    const {\n      userDetails: {\n        userId,\n        firstName,\n        lastName,\n        email,\n        mobileNumber: phone,\n      } = {},\n      shippingDetails: {\n        address: {\n          addressLine1: street,\n          addressLine2: street2,\n          postCode: postalCode,\n          city,\n          country,\n        } = {},\n      } = {},\n    } = order;\n\n    await crystallize.orders.updateOrder(crystallizeOrderId, {\n      payment: [\n        {\n          provider: \"custom\",\n          custom: {\n            properties: [\n              {\n                property: \"PaymentProvider\",\n                value: \"Vipps\",\n              },\n              {\n                property: \"Vipps orderId\",\n                value: crystallizeOrderId,\n              },\n              {\n                property: \"Vipps userId\",\n                value: userId,\n              },\n            ],\n          },\n        },\n      ],\n      customer: {\n        identifier: email,\n        firstName,\n        lastName,\n        addresses: [\n          {\n            type: \"delivery\",\n            email,\n            firstName,\n            lastName,\n            phone,\n            street,\n            street2,\n            postalCode,\n            city,\n            country,\n          },\n        ],\n      },\n    });\n\n    // Send out the confirmation email\n    await emailService.sendOrderConfirmation(crystallizeOrderId);\n  } else {\n    redirectTo = onErrorURL;\n    console.log(JSON.stringify(lastTransactionLogEntry, null, 2));\n  }\n\n  return {\n    redirectTo,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}