{"ast":null,"code":"const getCrystallizeVouchers = require(\"./crystallize-vouchers-example\");\n/**\n * Example of a voucher register\n * You can customise this to call an external service\n * or keep static vouchers like this\n */\n\n\nconst voucherRegister = [{\n  code: \"ok-deal\",\n  discountAmount: 2,\n  discountPercent: null,\n  onlyForAuthorisedUser: false\n}, {\n  code: \"fair-deal\",\n  discountAmount: null,\n  discountPercent: 5,\n  onlyForAuthorisedUser: false\n}, {\n  code: \"awesome-deal-logged-in\",\n  discountAmount: null,\n  discountPercent: 10,\n  onlyForAuthorisedUser: true\n}, {\n  code: \"good-deal-logged-in\",\n  discountAmount: 100,\n  discountPercent: null,\n  onlyForAuthorisedUser: true\n}];\nmodule.exports = {\n  async get({\n    code,\n    context\n  }) {\n    const {\n      user\n    } = context;\n    const isAnonymousUser = !user || !user.email;\n    const allCrystallizeVouchers = await getCrystallizeVouchers();\n    console.log(allCrystallizeVouchers);\n    const allVouchers = [...voucherRegister, ...allCrystallizeVouchers]; // As default, not all the vouchers work for anonymous users.\n    // As you'll see in the configuration above, some need the user to be logged in\n\n    if (isAnonymousUser) {\n      const voucher = allVouchers.filter(v => !v.onlyForAuthorisedUser).find(v => v.code === code);\n      return {\n        isValid: Boolean(voucher),\n        voucher\n      };\n    } // Search all vouchers for authenticated users\n\n\n    let voucher = allVouchers.find(v => v.code === code);\n    return {\n      isValid: Boolean(voucher),\n      voucher\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/voucher-service/index.js"],"names":["getCrystallizeVouchers","require","voucherRegister","code","discountAmount","discountPercent","onlyForAuthorisedUser","module","exports","get","context","user","isAnonymousUser","email","allCrystallizeVouchers","console","log","allVouchers","voucher","filter","v","find","isValid","Boolean"],"mappings":"AAAA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,gCAAD,CAAtC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAG,CACtB;AACEC,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,cAAc,EAAE,CAFlB;AAGEC,EAAAA,eAAe,EAAE,IAHnB;AAIEC,EAAAA,qBAAqB,EAAE;AAJzB,CADsB,EAOtB;AACEH,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,cAAc,EAAE,IAFlB;AAGEC,EAAAA,eAAe,EAAE,CAHnB;AAIEC,EAAAA,qBAAqB,EAAE;AAJzB,CAPsB,EAatB;AACEH,EAAAA,IAAI,EAAE,wBADR;AAEEC,EAAAA,cAAc,EAAE,IAFlB;AAGEC,EAAAA,eAAe,EAAE,EAHnB;AAIEC,EAAAA,qBAAqB,EAAE;AAJzB,CAbsB,EAmBtB;AACEH,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,cAAc,EAAE,GAFlB;AAGEC,EAAAA,eAAe,EAAE,IAHnB;AAIEC,EAAAA,qBAAqB,EAAE;AAJzB,CAnBsB,CAAxB;AA2BAC,MAAM,CAACC,OAAP,GAAiB;AACf,QAAMC,GAAN,CAAU;AAAEN,IAAAA,IAAF;AAAQO,IAAAA;AAAR,GAAV,EAA6B;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAWD,OAAjB;AAEA,UAAME,eAAe,GAAG,CAACD,IAAD,IAAS,CAACA,IAAI,CAACE,KAAvC;AAEA,UAAMC,sBAAsB,GAAG,MAAMd,sBAAsB,EAA3D;AAEAe,IAAAA,OAAO,CAACC,GAAR,CAAYF,sBAAZ;AAEA,UAAMG,WAAW,GAAG,CAAC,GAAGf,eAAJ,EAAqB,GAAGY,sBAAxB,CAApB,CAT2B,CAW3B;AACA;;AACA,QAAIF,eAAJ,EAAqB;AACnB,YAAMM,OAAO,GAAGD,WAAW,CACxBE,MADa,CACLC,CAAD,IAAO,CAACA,CAAC,CAACd,qBADJ,EAEbe,IAFa,CAEPD,CAAD,IAAOA,CAAC,CAACjB,IAAF,KAAWA,IAFV,CAAhB;AAIA,aAAO;AACLmB,QAAAA,OAAO,EAAEC,OAAO,CAACL,OAAD,CADX;AAELA,QAAAA;AAFK,OAAP;AAID,KAtB0B,CAwB3B;;;AACA,QAAIA,OAAO,GAAGD,WAAW,CAACI,IAAZ,CAAkBD,CAAD,IAAOA,CAAC,CAACjB,IAAF,KAAWA,IAAnC,CAAd;AAEA,WAAO;AACLmB,MAAAA,OAAO,EAAEC,OAAO,CAACL,OAAD,CADX;AAELA,MAAAA;AAFK,KAAP;AAID;;AAhCc,CAAjB","sourcesContent":["const getCrystallizeVouchers = require(\"./crystallize-vouchers-example\");\n\n/**\n * Example of a voucher register\n * You can customise this to call an external service\n * or keep static vouchers like this\n */\nconst voucherRegister = [\n  {\n    code: \"ok-deal\",\n    discountAmount: 2,\n    discountPercent: null,\n    onlyForAuthorisedUser: false,\n  },\n  {\n    code: \"fair-deal\",\n    discountAmount: null,\n    discountPercent: 5,\n    onlyForAuthorisedUser: false,\n  },\n  {\n    code: \"awesome-deal-logged-in\",\n    discountAmount: null,\n    discountPercent: 10,\n    onlyForAuthorisedUser: true,\n  },\n  {\n    code: \"good-deal-logged-in\",\n    discountAmount: 100,\n    discountPercent: null,\n    onlyForAuthorisedUser: true,\n  },\n];\n\nmodule.exports = {\n  async get({ code, context }) {\n    const { user } = context;\n\n    const isAnonymousUser = !user || !user.email;\n\n    const allCrystallizeVouchers = await getCrystallizeVouchers();\n\n    console.log(allCrystallizeVouchers)\n\n    const allVouchers = [...voucherRegister, ...allCrystallizeVouchers];\n\n    // As default, not all the vouchers work for anonymous users.\n    // As you'll see in the configuration above, some need the user to be logged in\n    if (isAnonymousUser) {\n      const voucher = allVouchers\n        .filter((v) => !v.onlyForAuthorisedUser)\n        .find((v) => v.code === code);\n\n      return {\n        isValid: Boolean(voucher),\n        voucher,\n      };\n    }\n\n    // Search all vouchers for authenticated users\n    let voucher = allVouchers.find((v) => v.code === code);\n\n    return {\n      isValid: Boolean(voucher),\n      voucher,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}