{"ast":null,"code":"module.exports = async function stripeToCrystallizeOrderModel({\n  basket,\n  checkoutModel,\n  paymentIntentId\n}) {\n  const {\n    getClient\n  } = require(\"./utils\");\n\n  const paymentIntent = await getClient().paymentIntents.retrieve(paymentIntentId);\n  const {\n    data\n  } = paymentIntent.charges;\n  const charge = data[0];\n  const customerName = charge.billing_details.name.split(\" \");\n  let email = charge.receipt_email;\n\n  if (!email && checkoutModel.customer && checkoutModel.customer.addresses) {\n    const addressWithEmail = checkoutModel.customer.addresses.find(a => !!a.email);\n\n    if (addressWithEmail) {\n      email = addressWithEmail.email;\n    }\n  }\n\n  console.log(checkoutModel.customer);\n  return {\n    cart: basket.cart,\n    total: basket.total,\n    additionalInformation: JSON.stringify({\n      stripe_merchant_data: paymentIntent.merchant_data,\n      order_metadata: checkoutModel.metadata\n    }),\n    customer: {\n      identifier: \"\",\n      firstName: customerName[0],\n      middleName: customerName.slice(1, customerName.length - 1).join(),\n      lastName: customerName[customerName.length - 1],\n      birthDate: Date,\n      addresses: [{\n        type: \"billing\",\n        firstName: customerName[0],\n        middleName: customerName.slice(1, customerName.length - 1).join(),\n        lastName: customerName[customerName.length - 1],\n        street: charge.billing_details.address.line1,\n        street2: charge.billing_details.address.line2,\n        postalCode: charge.billing_details.address.postal_code,\n        city: charge.billing_details.address.city,\n        state: charge.billing_details.address.state,\n        country: charge.billing_details.address.country,\n        phone: charge.billing_details.phone,\n        email\n      }, {\n        type: \"delivery\",\n        firstName: customerName[0],\n        middleName: customerName.slice(1, customerName.length - 1).join(),\n        lastName: customerName[customerName.length - 1],\n        street: checkoutModel.customer.addresses[1].street,\n        street2: charge.billing_details.address.line2,\n        postalCode: charge.billing_details.address.postal_code,\n        city: charge.billing_details.address.city,\n        state: charge.billing_details.address.state,\n        country: charge.billing_details.address.country,\n        phone: charge.billing_details.phone,\n        email\n      }]\n    },\n    payment: [{\n      provider: \"stripe\",\n      stripe: {\n        stripe: charge.id,\n        customerId: charge.customer,\n        orderId: charge.payment_intent,\n        paymentMethod: charge.payment_method_details.type,\n        paymentMethodId: charge.payment_method,\n        paymentIntentId: charge.payment_intent,\n        subscriptionId: charge.subscription,\n        metadata: \"\"\n      }\n    }]\n  };\n};","map":{"version":3,"sources":["/Users/acandael/Sites/crystallize-app/src/services/payment-providers/stripe/to-crystallize-order-model.js"],"names":["module","exports","stripeToCrystallizeOrderModel","basket","checkoutModel","paymentIntentId","getClient","require","paymentIntent","paymentIntents","retrieve","data","charges","charge","customerName","billing_details","name","split","email","receipt_email","customer","addresses","addressWithEmail","find","a","console","log","cart","total","additionalInformation","JSON","stringify","stripe_merchant_data","merchant_data","order_metadata","metadata","identifier","firstName","middleName","slice","length","join","lastName","birthDate","Date","type","street","address","line1","street2","line2","postalCode","postal_code","city","state","country","phone","payment","provider","stripe","id","customerId","orderId","payment_intent","paymentMethod","payment_method_details","paymentMethodId","payment_method","subscriptionId","subscription"],"mappings":"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","sourcesContent":["module.exports = async function stripeToCrystallizeOrderModel({\n  basket,\n  checkoutModel,\n  paymentIntentId,\n}) {\n  const { getClient } = require(\"./utils\");\n\n  const paymentIntent = await getClient().paymentIntents.retrieve(\n    paymentIntentId\n  );\n\n  const { data } = paymentIntent.charges;\n  const charge = data[0];\n\n  const customerName = charge.billing_details.name.split(\" \");\n  let email = charge.receipt_email;\n  if (!email && checkoutModel.customer && checkoutModel.customer.addresses) {\n    const addressWithEmail = checkoutModel.customer.addresses.find(\n      (a) => !!a.email\n    );\n    if (addressWithEmail) {\n      email = addressWithEmail.email;\n    }\n  }\n\n  console.log(checkoutModel.customer)\n\n  return {\n    cart: basket.cart,\n    total: basket.total,\n    additionalInformation: JSON.stringify({\n      stripe_merchant_data: paymentIntent.merchant_data,\n      order_metadata: checkoutModel.metadata,\n    }),\n    customer: {\n      identifier: \"\",\n      firstName: customerName[0],\n      middleName: customerName.slice(1, customerName.length - 1).join(),\n      lastName: customerName[customerName.length - 1],\n      birthDate: Date,\n      addresses: [\n        {\n          type: \"billing\",\n          firstName: customerName[0],\n          middleName: customerName.slice(1, customerName.length - 1).join(),\n          lastName: customerName[customerName.length - 1],\n          street: charge.billing_details.address.line1,\n          street2: charge.billing_details.address.line2,\n          postalCode: charge.billing_details.address.postal_code,\n          city: charge.billing_details.address.city,\n          state: charge.billing_details.address.state,\n          country: charge.billing_details.address.country,\n          phone: charge.billing_details.phone,\n          email,\n        },\n        {\n          type: \"delivery\",\n          firstName: customerName[0],\n          middleName: customerName.slice(1, customerName.length - 1).join(),\n          lastName: customerName[customerName.length - 1],\n          street: checkoutModel.customer.addresses[1].street,\n          street2: charge.billing_details.address.line2,\n          postalCode: charge.billing_details.address.postal_code,\n          city: charge.billing_details.address.city,\n          state: charge.billing_details.address.state,\n          country: charge.billing_details.address.country,\n          phone: charge.billing_details.phone,\n          email,\n        },\n      ],\n    },\n    payment: [\n      {\n        provider: \"stripe\",\n        stripe: {\n          stripe: charge.id,\n          customerId: charge.customer,\n          orderId: charge.payment_intent,\n          paymentMethod: charge.payment_method_details.type,\n          paymentMethodId: charge.payment_method,\n          paymentIntentId: charge.payment_intent,\n          subscriptionId: charge.subscription,\n          metadata: \"\",\n        },\n      },\n    ],\n  };\n};"]},"metadata":{},"sourceType":"script"}